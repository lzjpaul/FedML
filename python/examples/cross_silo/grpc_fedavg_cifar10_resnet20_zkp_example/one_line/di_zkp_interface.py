# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _di_zkp_interface
else:
    import _di_zkp_interface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _di_zkp_interface.delete_SwigPyIterator

    def value(self):
        return _di_zkp_interface.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _di_zkp_interface.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _di_zkp_interface.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _di_zkp_interface.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _di_zkp_interface.SwigPyIterator_equal(self, x)

    def copy(self):
        return _di_zkp_interface.SwigPyIterator_copy(self)

    def next(self):
        return _di_zkp_interface.SwigPyIterator_next(self)

    def __next__(self):
        return _di_zkp_interface.SwigPyIterator___next__(self)

    def previous(self):
        return _di_zkp_interface.SwigPyIterator_previous(self)

    def advance(self, n):
        return _di_zkp_interface.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _di_zkp_interface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _di_zkp_interface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _di_zkp_interface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _di_zkp_interface.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _di_zkp_interface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _di_zkp_interface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _di_zkp_interface:
_di_zkp_interface.SwigPyIterator_swigregister(SwigPyIterator)

class PublicKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pub = property(_di_zkp_interface.PublicKey_pub_get, _di_zkp_interface.PublicKey_pub_set)

    def __eq__(self, other):
        return _di_zkp_interface.PublicKey___eq__(self, other)

    def export_to_bytestream(self, it):
        return _di_zkp_interface.PublicKey_export_to_bytestream(self, it)

    def import_from_bytestream(self, it_bytes):
        return _di_zkp_interface.PublicKey_import_from_bytestream(self, it_bytes)

    def __init__(self):
        _di_zkp_interface.PublicKey_swiginit(self, _di_zkp_interface.new_PublicKey())
    __swig_destroy__ = _di_zkp_interface.delete_PublicKey

# Register PublicKey in _di_zkp_interface:
_di_zkp_interface.PublicKey_swigregister(PublicKey)
cvar = _di_zkp_interface.cvar
ENCRISTSCALBYTES = cvar.ENCRISTSCALBYTES
NUM_THREADS = cvar.NUM_THREADS

class PrivateKey(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    prv = property(_di_zkp_interface.PrivateKey_prv_get, _di_zkp_interface.PrivateKey_prv_set)

    def __eq__(self, other):
        return _di_zkp_interface.PrivateKey___eq__(self, other)

    def __init__(self):
        _di_zkp_interface.PrivateKey_swiginit(self, _di_zkp_interface.new_PrivateKey())
    __swig_destroy__ = _di_zkp_interface.delete_PrivateKey

# Register PrivateKey in _di_zkp_interface:
_di_zkp_interface.PrivateKey_swigregister(PrivateKey)

class Nonce(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    non = property(_di_zkp_interface.Nonce_non_get, _di_zkp_interface.Nonce_non_set)

    def __eq__(self, other):
        return _di_zkp_interface.Nonce___eq__(self, other)

    def __init__(self):
        _di_zkp_interface.Nonce_swiginit(self, _di_zkp_interface.new_Nonce())
    __swig_destroy__ = _di_zkp_interface.delete_Nonce

# Register Nonce in _di_zkp_interface:
_di_zkp_interface.Nonce_swigregister(Nonce)

class CipherWithNonce(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cip = property(_di_zkp_interface.CipherWithNonce_cip_get, _di_zkp_interface.CipherWithNonce_cip_set)
    non = property(_di_zkp_interface.CipherWithNonce_non_get, _di_zkp_interface.CipherWithNonce_non_set)

    def __init__(self, clear_text_length):
        _di_zkp_interface.CipherWithNonce_swiginit(self, _di_zkp_interface.new_CipherWithNonce(clear_text_length))

    def __eq__(self, other):
        return _di_zkp_interface.CipherWithNonce___eq__(self, other)

    def export_to_bytestream(self, it):
        return _di_zkp_interface.CipherWithNonce_export_to_bytestream(self, it)

    def import_from_bytestream(self, it_bytes):
        return _di_zkp_interface.CipherWithNonce_import_from_bytestream(self, it_bytes)
    __swig_destroy__ = _di_zkp_interface.delete_CipherWithNonce

# Register CipherWithNonce in _di_zkp_interface:
_di_zkp_interface.CipherWithNonce_swigregister(CipherWithNonce)


def generate_dh_key_pair():
    return _di_zkp_interface.generate_dh_key_pair()

def generate_random_nonce():
    return _di_zkp_interface.generate_random_nonce()

def encrypt(*args):
    return _di_zkp_interface.encrypt(*args)

def decrypt(*args):
    return _di_zkp_interface.decrypt(*args)
class Predicate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dim = property(_di_zkp_interface.Predicate_dim_get, _di_zkp_interface.Predicate_dim_set)
    num_weight_keys = property(_di_zkp_interface.Predicate_num_weight_keys_get, _di_zkp_interface.Predicate_num_weight_keys_set)
    num_blinds_per_weight_key = property(_di_zkp_interface.Predicate_num_blinds_per_weight_key_get, _di_zkp_interface.Predicate_num_blinds_per_weight_key_set)
    num_samples = property(_di_zkp_interface.Predicate_num_samples_get, _di_zkp_interface.Predicate_num_samples_set)
    random_normal_bit_shifter = property(_di_zkp_interface.Predicate_random_normal_bit_shifter_get, _di_zkp_interface.Predicate_random_normal_bit_shifter_set)
    bias = property(_di_zkp_interface.Predicate_bias_get, _di_zkp_interface.Predicate_bias_set)
    coeffs = property(_di_zkp_interface.Predicate_coeffs_get, _di_zkp_interface.Predicate_coeffs_set)
    bias_bound = property(_di_zkp_interface.Predicate_bias_bound_get, _di_zkp_interface.Predicate_bias_bound_set)
    coeffs_bound = property(_di_zkp_interface.Predicate_coeffs_bound_get, _di_zkp_interface.Predicate_coeffs_bound_set)
    linear_comb_bound_bits = property(_di_zkp_interface.Predicate_linear_comb_bound_bits_get, _di_zkp_interface.Predicate_linear_comb_bound_bits_set)
    bound_sq = property(_di_zkp_interface.Predicate_bound_sq_get, _di_zkp_interface.Predicate_bound_sq_set)
    max_bound_sq_bits = property(_di_zkp_interface.Predicate_max_bound_sq_bits_get, _di_zkp_interface.Predicate_max_bound_sq_bits_set)
    bound_elem_keys_1 = property(_di_zkp_interface.Predicate_bound_elem_keys_1_get, _di_zkp_interface.Predicate_bound_elem_keys_1_set)
    bound_elem_keys_2 = property(_di_zkp_interface.Predicate_bound_elem_keys_2_get, _di_zkp_interface.Predicate_bound_elem_keys_2_set)
    aa_seed = property(_di_zkp_interface.Predicate_aa_seed_get, _di_zkp_interface.Predicate_aa_seed_set)
    hh = property(_di_zkp_interface.Predicate_hh_get, _di_zkp_interface.Predicate_hh_set)
    b_precomp = property(_di_zkp_interface.Predicate_b_precomp_get, _di_zkp_interface.Predicate_b_precomp_set)
    hh_precomp = property(_di_zkp_interface.Predicate_hh_precomp_get, _di_zkp_interface.Predicate_hh_precomp_set)
    hh_comb = property(_di_zkp_interface.Predicate_hh_comb_get, _di_zkp_interface.Predicate_hh_comb_set)
    square_key = property(_di_zkp_interface.Predicate_square_key_get, _di_zkp_interface.Predicate_square_key_set)

    def __init__(self, dim, num_blinds_per_weight_key, num_samples, random_normal_bit_shifter, linear_comb_bound_bits, max_bound_sq_bits, b_precomp=True):
        _di_zkp_interface.Predicate_swiginit(self, _di_zkp_interface.new_Predicate(dim, num_blinds_per_weight_key, num_samples, random_normal_bit_shifter, linear_comb_bound_bits, max_bound_sq_bits, b_precomp))

    def set_bound_sq(self, B):
        return _di_zkp_interface.Predicate_set_bound_sq(self, B)

    def initialize_from_seed(self, seed):
        return _di_zkp_interface.Predicate_initialize_from_seed(self, seed)
    __swig_destroy__ = _di_zkp_interface.delete_Predicate

# Register Predicate in _di_zkp_interface:
_di_zkp_interface.Predicate_swigregister(Predicate)

class Proof(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    linear_comb_batch_commitments = property(_di_zkp_interface.Proof_linear_comb_batch_commitments_get, _di_zkp_interface.Proof_linear_comb_batch_commitments_set)
    linear_comb_single_commitments = property(_di_zkp_interface.Proof_linear_comb_single_commitments_get, _di_zkp_interface.Proof_linear_comb_single_commitments_set)
    proof_well_formed = property(_di_zkp_interface.Proof_proof_well_formed_get, _di_zkp_interface.Proof_proof_well_formed_set)
    proof_linear_comb_bound = property(_di_zkp_interface.Proof_proof_linear_comb_bound_get, _di_zkp_interface.Proof_proof_linear_comb_bound_set)
    square_commitments = property(_di_zkp_interface.Proof_square_commitments_get, _di_zkp_interface.Proof_square_commitments_set)
    proof_squares = property(_di_zkp_interface.Proof_proof_squares_get, _di_zkp_interface.Proof_proof_squares_set)
    proof_sum_range = property(_di_zkp_interface.Proof_proof_sum_range_get, _di_zkp_interface.Proof_proof_sum_range_set)

    def __init__(self, num_blinds_per_weight_key, num_norm_bound_samples, linear_comb_bound_bits, sum_bound_bits):
        _di_zkp_interface.Proof_swiginit(self, _di_zkp_interface.new_Proof(num_blinds_per_weight_key, num_norm_bound_samples, linear_comb_bound_bits, sum_bound_bits))

    @staticmethod
    def size(num_blinds_per_weight_key, num_norm_bound_samples, linear_comb_bound_bits, sq_sum_bound_bits):
        return _di_zkp_interface.Proof_size(num_blinds_per_weight_key, num_norm_bound_samples, linear_comb_bound_bits, sq_sum_bound_bits)

    def export_to_bytestream(self, it):
        return _di_zkp_interface.Proof_export_to_bytestream(self, it)

    def import_from_bytestream(self, it):
        return _di_zkp_interface.Proof_import_from_bytestream(self, it)
    __swig_destroy__ = _di_zkp_interface.delete_Proof

# Register Proof in _di_zkp_interface:
_di_zkp_interface.Proof_swigregister(Proof)

def Proof_size(num_blinds_per_weight_key, num_norm_bound_samples, linear_comb_bound_bits, sq_sum_bound_bits):
    return _di_zkp_interface.Proof_size(num_blinds_per_weight_key, num_norm_bound_samples, linear_comb_bound_bits, sq_sum_bound_bits)

PROTOCOL_TYPE_PRECOMP = _di_zkp_interface.PROTOCOL_TYPE_PRECOMP
PROTOCOL_TYPE_NO_PRECOMP = _di_zkp_interface.PROTOCOL_TYPE_NO_PRECOMP
PROTOCOL_TYPE_NON_PRIV_INT = _di_zkp_interface.PROTOCOL_TYPE_NON_PRIV_INT
PROTOCOL_TYPE_NON_PRIV_FLOAT = _di_zkp_interface.PROTOCOL_TYPE_NON_PRIV_FLOAT
class CommonInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    protocol_type = property(_di_zkp_interface.CommonInterface_protocol_type_get, _di_zkp_interface.CommonInterface_protocol_type_set)
    normalizing_factor = property(_di_zkp_interface.CommonInterface_normalizing_factor_get, _di_zkp_interface.CommonInterface_normalizing_factor_set)
    num_clients = property(_di_zkp_interface.CommonInterface_num_clients_get, _di_zkp_interface.CommonInterface_num_clients_set)
    max_malicious_clients = property(_di_zkp_interface.CommonInterface_max_malicious_clients_get, _di_zkp_interface.CommonInterface_max_malicious_clients_set)
    dim = property(_di_zkp_interface.CommonInterface_dim_get, _di_zkp_interface.CommonInterface_dim_set)
    weight_bits = property(_di_zkp_interface.CommonInterface_weight_bits_get, _di_zkp_interface.CommonInterface_weight_bits_set)
    server_flags = property(_di_zkp_interface.CommonInterface_server_flags_get, _di_zkp_interface.CommonInterface_server_flags_set)
    dh_public_key_collection = property(_di_zkp_interface.CommonInterface_dh_public_key_collection_get, _di_zkp_interface.CommonInterface_dh_public_key_collection_set)
    predicate = property(_di_zkp_interface.CommonInterface_predicate_get, _di_zkp_interface.CommonInterface_predicate_set)
    shamir_check_string_collection = property(_di_zkp_interface.CommonInterface_shamir_check_string_collection_get, _di_zkp_interface.CommonInterface_shamir_check_string_collection_set)

    def __init__(self, *args):
        _di_zkp_interface.CommonInterface_swiginit(self, _di_zkp_interface.new_CommonInterface(*args))

    def set_bound_sq(self, B):
        return _di_zkp_interface.CommonInterface_set_bound_sq(self, B)

    def set_normalizing_factor_and_compute_bound_sq(self, norm_bound, standard_deviation_factor):
        return _di_zkp_interface.CommonInterface_set_normalizing_factor_and_compute_bound_sq(self, norm_bound, standard_deviation_factor)

    def reset_server_flags(self):
        return _di_zkp_interface.CommonInterface_reset_server_flags(self)
    __swig_destroy__ = _di_zkp_interface.delete_CommonInterface

# Register CommonInterface in _di_zkp_interface:
_di_zkp_interface.CommonInterface_swigregister(CommonInterface)


def import_flags_start_from_1_from_bytestream(flags, it):
    return _di_zkp_interface.import_flags_start_from_1_from_bytestream(flags, it)

def export_flags_start_from_1_to_bytestream(flags, it):
    return _di_zkp_interface.export_flags_start_from_1_to_bytestream(flags, it)
class ClientInterface(CommonInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    client_id = property(_di_zkp_interface.ClientInterface_client_id_get, _di_zkp_interface.ClientInterface_client_id_set)
    weight_updates = property(_di_zkp_interface.ClientInterface_weight_updates_get, _di_zkp_interface.ClientInterface_weight_updates_set)
    blinds_to_share = property(_di_zkp_interface.ClientInterface_blinds_to_share_get, _di_zkp_interface.ClientInterface_blinds_to_share_set)
    dh_public_key = property(_di_zkp_interface.ClientInterface_dh_public_key_get, _di_zkp_interface.ClientInterface_dh_public_key_set)
    dh_private_key = property(_di_zkp_interface.ClientInterface_dh_private_key_get, _di_zkp_interface.ClientInterface_dh_private_key_set)
    batch_shamir_share_with_check = property(_di_zkp_interface.ClientInterface_batch_shamir_share_with_check_get, _di_zkp_interface.ClientInterface_batch_shamir_share_with_check_set)
    encrypted_shamir_shares = property(_di_zkp_interface.ClientInterface_encrypted_shamir_shares_get, _di_zkp_interface.ClientInterface_encrypted_shamir_shares_set)
    proof = property(_di_zkp_interface.ClientInterface_proof_get, _di_zkp_interface.ClientInterface_proof_set)
    other_encrypted_shamir_shares = property(_di_zkp_interface.ClientInterface_other_encrypted_shamir_shares_get, _di_zkp_interface.ClientInterface_other_encrypted_shamir_shares_set)
    other_shamir_shares = property(_di_zkp_interface.ClientInterface_other_shamir_shares_get, _di_zkp_interface.ClientInterface_other_shamir_shares_set)
    flags = property(_di_zkp_interface.ClientInterface_flags_get, _di_zkp_interface.ClientInterface_flags_set)
    dispute_clients = property(_di_zkp_interface.ClientInterface_dispute_clients_get, _di_zkp_interface.ClientInterface_dispute_clients_set)
    dispute_shares = property(_di_zkp_interface.ClientInterface_dispute_shares_get, _di_zkp_interface.ClientInterface_dispute_shares_set)
    other_dispute_shares = property(_di_zkp_interface.ClientInterface_other_dispute_shares_get, _di_zkp_interface.ClientInterface_other_dispute_shares_set)
    aggregates = property(_di_zkp_interface.ClientInterface_aggregates_get, _di_zkp_interface.ClientInterface_aggregates_set)

    def __init__(self, *args):
        _di_zkp_interface.ClientInterface_swiginit(self, _di_zkp_interface.new_ClientInterface(*args))

    def import_weight_updates(self, u):
        return _di_zkp_interface.ClientInterface_import_weight_updates(self, u)

    def reset_flags(self):
        return _di_zkp_interface.ClientInterface_reset_flags(self)

    def generate_dh_key_pair(self):
        return _di_zkp_interface.ClientInterface_generate_dh_key_pair(self)

    def generate_batch_shares_and_check_string(self):
        return _di_zkp_interface.ClientInterface_generate_batch_shares_and_check_string(self)

    def encrypt_shares(self):
        return _di_zkp_interface.ClientInterface_encrypt_shares(self)

    def set_aa_seed(self, s):
        return _di_zkp_interface.ClientInterface_set_aa_seed(self, s)

    def generate_proof(self):
        return _di_zkp_interface.ClientInterface_generate_proof(self)

    def decrypt_shamir_shares(self):
        return _di_zkp_interface.ClientInterface_decrypt_shamir_shares(self)

    def check_shamir_share_integrity(self):
        return _di_zkp_interface.ClientInterface_check_shamir_share_integrity(self)

    def generate_dispute_shares(self):
        return _di_zkp_interface.ClientInterface_generate_dispute_shares(self)

    def update_other_shamir_shares_with_dispute(self):
        return _di_zkp_interface.ClientInterface_update_other_shamir_shares_with_dispute(self)

    def compute_aggegrated_share(self):
        return _di_zkp_interface.ClientInterface_compute_aggegrated_share(self)

    def initialize_from_seed(self, seed):
        return _di_zkp_interface.ClientInterface_initialize_from_seed(self, seed)

    def send_1_internal(self, B, u):
        return _di_zkp_interface.ClientInterface_send_1_internal(self, B, u)

    def send_1(self, norm_bound, standard_deviation_factor, u_float):
        return _di_zkp_interface.ClientInterface_send_1(self, norm_bound, standard_deviation_factor, u_float)

    def receive_and_send_2(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_2(self, bytes_str)

    def receive_and_send_3(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_3(self, bytes_str)

    def receive_and_send_4(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_4(self, bytes_str)

    def receive_and_send_5(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_5(self, bytes_str)
    __swig_destroy__ = _di_zkp_interface.delete_ClientInterface

# Register ClientInterface in _di_zkp_interface:
_di_zkp_interface.ClientInterface_swigregister(ClientInterface)

class VecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _di_zkp_interface.VecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _di_zkp_interface.VecFloat___nonzero__(self)

    def __bool__(self):
        return _di_zkp_interface.VecFloat___bool__(self)

    def __len__(self):
        return _di_zkp_interface.VecFloat___len__(self)

    def __getslice__(self, i, j):
        return _di_zkp_interface.VecFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _di_zkp_interface.VecFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _di_zkp_interface.VecFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _di_zkp_interface.VecFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _di_zkp_interface.VecFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _di_zkp_interface.VecFloat___setitem__(self, *args)

    def pop(self):
        return _di_zkp_interface.VecFloat_pop(self)

    def append(self, x):
        return _di_zkp_interface.VecFloat_append(self, x)

    def empty(self):
        return _di_zkp_interface.VecFloat_empty(self)

    def size(self):
        return _di_zkp_interface.VecFloat_size(self)

    def swap(self, v):
        return _di_zkp_interface.VecFloat_swap(self, v)

    def begin(self):
        return _di_zkp_interface.VecFloat_begin(self)

    def end(self):
        return _di_zkp_interface.VecFloat_end(self)

    def rbegin(self):
        return _di_zkp_interface.VecFloat_rbegin(self)

    def rend(self):
        return _di_zkp_interface.VecFloat_rend(self)

    def clear(self):
        return _di_zkp_interface.VecFloat_clear(self)

    def get_allocator(self):
        return _di_zkp_interface.VecFloat_get_allocator(self)

    def pop_back(self):
        return _di_zkp_interface.VecFloat_pop_back(self)

    def erase(self, *args):
        return _di_zkp_interface.VecFloat_erase(self, *args)

    def __init__(self, *args):
        _di_zkp_interface.VecFloat_swiginit(self, _di_zkp_interface.new_VecFloat(*args))

    def push_back(self, x):
        return _di_zkp_interface.VecFloat_push_back(self, x)

    def front(self):
        return _di_zkp_interface.VecFloat_front(self)

    def back(self):
        return _di_zkp_interface.VecFloat_back(self)

    def assign(self, n, x):
        return _di_zkp_interface.VecFloat_assign(self, n, x)

    def resize(self, *args):
        return _di_zkp_interface.VecFloat_resize(self, *args)

    def insert(self, *args):
        return _di_zkp_interface.VecFloat_insert(self, *args)

    def reserve(self, n):
        return _di_zkp_interface.VecFloat_reserve(self, n)

    def capacity(self):
        return _di_zkp_interface.VecFloat_capacity(self)
    __swig_destroy__ = _di_zkp_interface.delete_VecFloat

# Register VecFloat in _di_zkp_interface:
_di_zkp_interface.VecFloat_swigregister(VecFloat)

class VecVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _di_zkp_interface.VecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _di_zkp_interface.VecVecFloat___nonzero__(self)

    def __bool__(self):
        return _di_zkp_interface.VecVecFloat___bool__(self)

    def __len__(self):
        return _di_zkp_interface.VecVecFloat___len__(self)

    def __getslice__(self, i, j):
        return _di_zkp_interface.VecVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _di_zkp_interface.VecVecFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _di_zkp_interface.VecVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _di_zkp_interface.VecVecFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _di_zkp_interface.VecVecFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _di_zkp_interface.VecVecFloat___setitem__(self, *args)

    def pop(self):
        return _di_zkp_interface.VecVecFloat_pop(self)

    def append(self, x):
        return _di_zkp_interface.VecVecFloat_append(self, x)

    def empty(self):
        return _di_zkp_interface.VecVecFloat_empty(self)

    def size(self):
        return _di_zkp_interface.VecVecFloat_size(self)

    def swap(self, v):
        return _di_zkp_interface.VecVecFloat_swap(self, v)

    def begin(self):
        return _di_zkp_interface.VecVecFloat_begin(self)

    def end(self):
        return _di_zkp_interface.VecVecFloat_end(self)

    def rbegin(self):
        return _di_zkp_interface.VecVecFloat_rbegin(self)

    def rend(self):
        return _di_zkp_interface.VecVecFloat_rend(self)

    def clear(self):
        return _di_zkp_interface.VecVecFloat_clear(self)

    def get_allocator(self):
        return _di_zkp_interface.VecVecFloat_get_allocator(self)

    def pop_back(self):
        return _di_zkp_interface.VecVecFloat_pop_back(self)

    def erase(self, *args):
        return _di_zkp_interface.VecVecFloat_erase(self, *args)

    def __init__(self, *args):
        _di_zkp_interface.VecVecFloat_swiginit(self, _di_zkp_interface.new_VecVecFloat(*args))

    def push_back(self, x):
        return _di_zkp_interface.VecVecFloat_push_back(self, x)

    def front(self):
        return _di_zkp_interface.VecVecFloat_front(self)

    def back(self):
        return _di_zkp_interface.VecVecFloat_back(self)

    def assign(self, n, x):
        return _di_zkp_interface.VecVecFloat_assign(self, n, x)

    def resize(self, *args):
        return _di_zkp_interface.VecVecFloat_resize(self, *args)

    def insert(self, *args):
        return _di_zkp_interface.VecVecFloat_insert(self, *args)

    def reserve(self, n):
        return _di_zkp_interface.VecVecFloat_reserve(self, n)

    def capacity(self):
        return _di_zkp_interface.VecVecFloat_capacity(self)
    __swig_destroy__ = _di_zkp_interface.delete_VecVecFloat

# Register VecVecFloat in _di_zkp_interface:
_di_zkp_interface.VecVecFloat_swigregister(VecVecFloat)

class RistElemHasher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, h):
        return _di_zkp_interface.RistElemHasher___call__(self, h)

    def __init__(self):
        _di_zkp_interface.RistElemHasher_swiginit(self, _di_zkp_interface.new_RistElemHasher())
    __swig_destroy__ = _di_zkp_interface.delete_RistElemHasher

# Register RistElemHasher in _di_zkp_interface:
_di_zkp_interface.RistElemHasher_swigregister(RistElemHasher)

class ServerInterface(CommonInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    flags_collection = property(_di_zkp_interface.ServerInterface_flags_collection_get, _di_zkp_interface.ServerInterface_flags_collection_set)
    committed_updates_collection = property(_di_zkp_interface.ServerInterface_committed_updates_collection_get, _di_zkp_interface.ServerInterface_committed_updates_collection_set)
    encrypted_shamir_shares_collection = property(_di_zkp_interface.ServerInterface_encrypted_shamir_shares_collection_get, _di_zkp_interface.ServerInterface_encrypted_shamir_shares_collection_set)
    proof_collection = property(_di_zkp_interface.ServerInterface_proof_collection_get, _di_zkp_interface.ServerInterface_proof_collection_set)
    bb = property(_di_zkp_interface.ServerInterface_bb_get, _di_zkp_interface.ServerInterface_bb_set)
    aa_bb = property(_di_zkp_interface.ServerInterface_aa_bb_get, _di_zkp_interface.ServerInterface_aa_bb_set)
    dispute_table = property(_di_zkp_interface.ServerInterface_dispute_table_get, _di_zkp_interface.ServerInterface_dispute_table_set)
    dispute_shares_collection = property(_di_zkp_interface.ServerInterface_dispute_shares_collection_get, _di_zkp_interface.ServerInterface_dispute_shares_collection_set)
    aggregates_collection = property(_di_zkp_interface.ServerInterface_aggregates_collection_get, _di_zkp_interface.ServerInterface_aggregates_collection_set)
    small_mult_base_table_bit_size = property(_di_zkp_interface.ServerInterface_small_mult_base_table_bit_size_get, _di_zkp_interface.ServerInterface_small_mult_base_table_bit_size_set)
    small_mult_base_table = property(_di_zkp_interface.ServerInterface_small_mult_base_table_get, _di_zkp_interface.ServerInterface_small_mult_base_table_set)
    final_update_int = property(_di_zkp_interface.ServerInterface_final_update_int_get, _di_zkp_interface.ServerInterface_final_update_int_set)
    final_update_float = property(_di_zkp_interface.ServerInterface_final_update_float_get, _di_zkp_interface.ServerInterface_final_update_float_set)
    final_update_float_avg = property(_di_zkp_interface.ServerInterface_final_update_float_avg_get, _di_zkp_interface.ServerInterface_final_update_float_avg_set)
    updates_int_collection = property(_di_zkp_interface.ServerInterface_updates_int_collection_get, _di_zkp_interface.ServerInterface_updates_int_collection_set)
    updates_float_collection = property(_di_zkp_interface.ServerInterface_updates_float_collection_get, _di_zkp_interface.ServerInterface_updates_float_collection_set)
    float_bound = property(_di_zkp_interface.ServerInterface_float_bound_get, _di_zkp_interface.ServerInterface_float_bound_set)

    def __init__(self, *args):
        _di_zkp_interface.ServerInterface_swiginit(self, _di_zkp_interface.new_ServerInterface(*args))

    def import_small_mult_base_table(self, small_table):
        return _di_zkp_interface.ServerInterface_import_small_mult_base_table(self, small_table)

    def generate_small_mult_base_table(self):
        return _di_zkp_interface.ServerInterface_generate_small_mult_base_table(self)

    def reset_dispute_table(self):
        return _di_zkp_interface.ServerInterface_reset_dispute_table(self)

    def import_committed_updates(self, pp, i):
        return _di_zkp_interface.ServerInterface_import_committed_updates(self, pp, i)

    def generate_aa_seed(self):
        return _di_zkp_interface.ServerInterface_generate_aa_seed(self)

    def generate_hh_comb_and_bb_and_aabb(self):
        return _di_zkp_interface.ServerInterface_generate_hh_comb_and_bb_and_aabb(self)

    def generate_dispute_table(self):
        return _di_zkp_interface.ServerInterface_generate_dispute_table(self)

    def check_linear_comb_batch_commitments_with_bb(self, i):
        return _di_zkp_interface.ServerInterface_check_linear_comb_batch_commitments_with_bb(self, i)

    def check_sq_bound_proof(self, i):
        return _di_zkp_interface.ServerInterface_check_sq_bound_proof(self, i)

    def check_proof(self, i):
        return _di_zkp_interface.ServerInterface_check_proof(self, i)

    def check_proofs(self):
        return _di_zkp_interface.ServerInterface_check_proofs(self)

    def check_disputes(self):
        return _di_zkp_interface.ServerInterface_check_disputes(self)

    def compute_final_update(self, parallel_on_clients=False):
        return _di_zkp_interface.ServerInterface_compute_final_update(self, parallel_on_clients)

    def valid_client_count(self):
        return _di_zkp_interface.ServerInterface_valid_client_count(self)

    def initialize_from_seed(self, seed):
        return _di_zkp_interface.ServerInterface_initialize_from_seed(self, seed)

    def initialize_new_iteration(self, *args):
        return _di_zkp_interface.ServerInterface_initialize_new_iteration(self, *args)

    def receive_1(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_1(self, bytes_str, i)

    def send_2(self):
        return _di_zkp_interface.ServerInterface_send_2(self)

    def receive_2(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_2(self, bytes_str, i)

    def concurrent_process_before_send_3(self):
        return _di_zkp_interface.ServerInterface_concurrent_process_before_send_3(self)

    def send_3(self, i):
        return _di_zkp_interface.ServerInterface_send_3(self, i)

    def receive_3(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_3(self, bytes_str, i)

    def process_before_send_4(self):
        return _di_zkp_interface.ServerInterface_process_before_send_4(self)

    def send_4(self, i):
        return _di_zkp_interface.ServerInterface_send_4(self, i)

    def receive_4(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_4(self, bytes_str, i)

    def process_before_send_5(self):
        return _di_zkp_interface.ServerInterface_process_before_send_5(self)

    def send_5(self, i):
        return _di_zkp_interface.ServerInterface_send_5(self, i)

    def receive_5(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_5(self, bytes_str, i)

    def finish_iteration(self, parallel_on_clients=False):
        return _di_zkp_interface.ServerInterface_finish_iteration(self, parallel_on_clients)

    def string_api_test(self, a):
        return _di_zkp_interface.ServerInterface_string_api_test(self, a)
    __swig_destroy__ = _di_zkp_interface.delete_ServerInterface

# Register ServerInterface in _di_zkp_interface:
_di_zkp_interface.ServerInterface_swigregister(ServerInterface)


def discrete_log(y, small_table, per_side_step_count):
    return _di_zkp_interface.discrete_log(y, small_table, per_side_step_count)


