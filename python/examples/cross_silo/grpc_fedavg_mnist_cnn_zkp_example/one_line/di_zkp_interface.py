# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_di_zkp_interface')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_di_zkp_interface')
    _di_zkp_interface = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_di_zkp_interface', [dirname(__file__)])
        except ImportError:
            import _di_zkp_interface
            return _di_zkp_interface
        try:
            _mod = imp.load_module('_di_zkp_interface', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _di_zkp_interface = swig_import_helper()
    del swig_import_helper
else:
    import _di_zkp_interface
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _di_zkp_interface.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _di_zkp_interface.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _di_zkp_interface.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _di_zkp_interface.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _di_zkp_interface.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _di_zkp_interface.SwigPyIterator_equal(self, x)

    def copy(self):
        return _di_zkp_interface.SwigPyIterator_copy(self)

    def next(self):
        return _di_zkp_interface.SwigPyIterator_next(self)

    def __next__(self):
        return _di_zkp_interface.SwigPyIterator___next__(self)

    def previous(self):
        return _di_zkp_interface.SwigPyIterator_previous(self)

    def advance(self, n):
        return _di_zkp_interface.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _di_zkp_interface.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _di_zkp_interface.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _di_zkp_interface.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _di_zkp_interface.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _di_zkp_interface.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _di_zkp_interface.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _di_zkp_interface.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PublicKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PublicKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pub"] = _di_zkp_interface.PublicKey_pub_set
    __swig_getmethods__["pub"] = _di_zkp_interface.PublicKey_pub_get
    if _newclass:
        pub = _swig_property(_di_zkp_interface.PublicKey_pub_get, _di_zkp_interface.PublicKey_pub_set)

    def __eq__(self, other):
        return _di_zkp_interface.PublicKey___eq__(self, other)

    def export_to_bytestream(self, it):
        return _di_zkp_interface.PublicKey_export_to_bytestream(self, it)

    def import_from_bytestream(self, it_bytes):
        return _di_zkp_interface.PublicKey_import_from_bytestream(self, it_bytes)

    def __init__(self):
        this = _di_zkp_interface.new_PublicKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_PublicKey
    __del__ = lambda self: None
PublicKey_swigregister = _di_zkp_interface.PublicKey_swigregister
PublicKey_swigregister(PublicKey)
cvar = _di_zkp_interface.cvar
ENCRISTSCALBYTES = cvar.ENCRISTSCALBYTES
NUM_THREADS = cvar.NUM_THREADS

class PrivateKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrivateKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrivateKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prv"] = _di_zkp_interface.PrivateKey_prv_set
    __swig_getmethods__["prv"] = _di_zkp_interface.PrivateKey_prv_get
    if _newclass:
        prv = _swig_property(_di_zkp_interface.PrivateKey_prv_get, _di_zkp_interface.PrivateKey_prv_set)

    def __eq__(self, other):
        return _di_zkp_interface.PrivateKey___eq__(self, other)

    def __init__(self):
        this = _di_zkp_interface.new_PrivateKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_PrivateKey
    __del__ = lambda self: None
PrivateKey_swigregister = _di_zkp_interface.PrivateKey_swigregister
PrivateKey_swigregister(PrivateKey)

class Nonce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nonce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Nonce, name)
    __repr__ = _swig_repr
    __swig_setmethods__["non"] = _di_zkp_interface.Nonce_non_set
    __swig_getmethods__["non"] = _di_zkp_interface.Nonce_non_get
    if _newclass:
        non = _swig_property(_di_zkp_interface.Nonce_non_get, _di_zkp_interface.Nonce_non_set)

    def __eq__(self, other):
        return _di_zkp_interface.Nonce___eq__(self, other)

    def __init__(self):
        this = _di_zkp_interface.new_Nonce()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_Nonce
    __del__ = lambda self: None
Nonce_swigregister = _di_zkp_interface.Nonce_swigregister
Nonce_swigregister(Nonce)

class CipherWithNonce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CipherWithNonce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CipherWithNonce, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cip"] = _di_zkp_interface.CipherWithNonce_cip_set
    __swig_getmethods__["cip"] = _di_zkp_interface.CipherWithNonce_cip_get
    if _newclass:
        cip = _swig_property(_di_zkp_interface.CipherWithNonce_cip_get, _di_zkp_interface.CipherWithNonce_cip_set)
    __swig_setmethods__["non"] = _di_zkp_interface.CipherWithNonce_non_set
    __swig_getmethods__["non"] = _di_zkp_interface.CipherWithNonce_non_get
    if _newclass:
        non = _swig_property(_di_zkp_interface.CipherWithNonce_non_get, _di_zkp_interface.CipherWithNonce_non_set)

    def __init__(self, clear_text_length):
        this = _di_zkp_interface.new_CipherWithNonce(clear_text_length)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _di_zkp_interface.CipherWithNonce___eq__(self, other)

    def export_to_bytestream(self, it):
        return _di_zkp_interface.CipherWithNonce_export_to_bytestream(self, it)

    def import_from_bytestream(self, it_bytes):
        return _di_zkp_interface.CipherWithNonce_import_from_bytestream(self, it_bytes)
    __swig_destroy__ = _di_zkp_interface.delete_CipherWithNonce
    __del__ = lambda self: None
CipherWithNonce_swigregister = _di_zkp_interface.CipherWithNonce_swigregister
CipherWithNonce_swigregister(CipherWithNonce)


def generate_dh_key_pair():
    return _di_zkp_interface.generate_dh_key_pair()
generate_dh_key_pair = _di_zkp_interface.generate_dh_key_pair

def generate_random_nonce():
    return _di_zkp_interface.generate_random_nonce()
generate_random_nonce = _di_zkp_interface.generate_random_nonce

def encrypt(*args):
    return _di_zkp_interface.encrypt(*args)
encrypt = _di_zkp_interface.encrypt

def decrypt(*args):
    return _di_zkp_interface.decrypt(*args)
decrypt = _di_zkp_interface.decrypt
CHECK_TYPE_L2NORM = _di_zkp_interface.CHECK_TYPE_L2NORM
CHECK_TYPE_SPHERE = _di_zkp_interface.CHECK_TYPE_SPHERE
CHECK_TYPE_COSINE_SIM = _di_zkp_interface.CHECK_TYPE_COSINE_SIM
CHECK_TYPE_ZENO = _di_zkp_interface.CHECK_TYPE_ZENO
class L2NormCheckParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2NormCheckParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L2NormCheckParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bound_sq"] = _di_zkp_interface.L2NormCheckParam_bound_sq_set
    __swig_getmethods__["bound_sq"] = _di_zkp_interface.L2NormCheckParam_bound_sq_get
    if _newclass:
        bound_sq = _swig_property(_di_zkp_interface.L2NormCheckParam_bound_sq_get, _di_zkp_interface.L2NormCheckParam_bound_sq_set)

    def __init__(self):
        this = _di_zkp_interface.new_L2NormCheckParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_L2NormCheckParam
    __del__ = lambda self: None
L2NormCheckParam_swigregister = _di_zkp_interface.L2NormCheckParam_swigregister
L2NormCheckParam_swigregister(L2NormCheckParam)

class SphereCheckParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereCheckParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SphereCheckParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bound_sq"] = _di_zkp_interface.SphereCheckParam_bound_sq_set
    __swig_getmethods__["bound_sq"] = _di_zkp_interface.SphereCheckParam_bound_sq_get
    if _newclass:
        bound_sq = _swig_property(_di_zkp_interface.SphereCheckParam_bound_sq_get, _di_zkp_interface.SphereCheckParam_bound_sq_set)
    __swig_setmethods__["center"] = _di_zkp_interface.SphereCheckParam_center_set
    __swig_getmethods__["center"] = _di_zkp_interface.SphereCheckParam_center_get
    if _newclass:
        center = _swig_property(_di_zkp_interface.SphereCheckParam_center_get, _di_zkp_interface.SphereCheckParam_center_set)

    def __init__(self):
        this = _di_zkp_interface.new_SphereCheckParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_SphereCheckParam
    __del__ = lambda self: None
SphereCheckParam_swigregister = _di_zkp_interface.SphereCheckParam_swigregister
SphereCheckParam_swigregister(SphereCheckParam)

class CosineSimCheckParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineSimCheckParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CosineSimCheckParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bound_sq"] = _di_zkp_interface.CosineSimCheckParam_bound_sq_set
    __swig_getmethods__["bound_sq"] = _di_zkp_interface.CosineSimCheckParam_bound_sq_get
    if _newclass:
        bound_sq = _swig_property(_di_zkp_interface.CosineSimCheckParam_bound_sq_get, _di_zkp_interface.CosineSimCheckParam_bound_sq_set)
    __swig_setmethods__["pivot"] = _di_zkp_interface.CosineSimCheckParam_pivot_set
    __swig_getmethods__["pivot"] = _di_zkp_interface.CosineSimCheckParam_pivot_get
    if _newclass:
        pivot = _swig_property(_di_zkp_interface.CosineSimCheckParam_pivot_get, _di_zkp_interface.CosineSimCheckParam_pivot_set)
    __swig_setmethods__["l2_sq_multiplier"] = _di_zkp_interface.CosineSimCheckParam_l2_sq_multiplier_set
    __swig_getmethods__["l2_sq_multiplier"] = _di_zkp_interface.CosineSimCheckParam_l2_sq_multiplier_get
    if _newclass:
        l2_sq_multiplier = _swig_property(_di_zkp_interface.CosineSimCheckParam_l2_sq_multiplier_get, _di_zkp_interface.CosineSimCheckParam_l2_sq_multiplier_set)
    __swig_setmethods__["inner_prod_sq_multiplier"] = _di_zkp_interface.CosineSimCheckParam_inner_prod_sq_multiplier_set
    __swig_getmethods__["inner_prod_sq_multiplier"] = _di_zkp_interface.CosineSimCheckParam_inner_prod_sq_multiplier_get
    if _newclass:
        inner_prod_sq_multiplier = _swig_property(_di_zkp_interface.CosineSimCheckParam_inner_prod_sq_multiplier_get, _di_zkp_interface.CosineSimCheckParam_inner_prod_sq_multiplier_set)

    def __init__(self):
        this = _di_zkp_interface.new_CosineSimCheckParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_CosineSimCheckParam
    __del__ = lambda self: None
CosineSimCheckParam_swigregister = _di_zkp_interface.CosineSimCheckParam_swigregister
CosineSimCheckParam_swigregister(CosineSimCheckParam)

class ZenoCheckParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZenoCheckParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZenoCheckParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pivot"] = _di_zkp_interface.ZenoCheckParam_pivot_set
    __swig_getmethods__["pivot"] = _di_zkp_interface.ZenoCheckParam_pivot_get
    if _newclass:
        pivot = _swig_property(_di_zkp_interface.ZenoCheckParam_pivot_get, _di_zkp_interface.ZenoCheckParam_pivot_set)
    __swig_setmethods__["gamma"] = _di_zkp_interface.ZenoCheckParam_gamma_set
    __swig_getmethods__["gamma"] = _di_zkp_interface.ZenoCheckParam_gamma_get
    if _newclass:
        gamma = _swig_property(_di_zkp_interface.ZenoCheckParam_gamma_get, _di_zkp_interface.ZenoCheckParam_gamma_set)
    __swig_setmethods__["rho"] = _di_zkp_interface.ZenoCheckParam_rho_set
    __swig_getmethods__["rho"] = _di_zkp_interface.ZenoCheckParam_rho_get
    if _newclass:
        rho = _swig_property(_di_zkp_interface.ZenoCheckParam_rho_get, _di_zkp_interface.ZenoCheckParam_rho_set)
    __swig_setmethods__["eps"] = _di_zkp_interface.ZenoCheckParam_eps_set
    __swig_getmethods__["eps"] = _di_zkp_interface.ZenoCheckParam_eps_get
    if _newclass:
        eps = _swig_property(_di_zkp_interface.ZenoCheckParam_eps_get, _di_zkp_interface.ZenoCheckParam_eps_set)

    def __init__(self):
        this = _di_zkp_interface.new_ZenoCheckParam()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_ZenoCheckParam
    __del__ = lambda self: None
ZenoCheckParam_swigregister = _di_zkp_interface.ZenoCheckParam_swigregister
ZenoCheckParam_swigregister(ZenoCheckParam)

class CheckParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CheckParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["check_type"] = _di_zkp_interface.CheckParam_check_type_set
    __swig_getmethods__["check_type"] = _di_zkp_interface.CheckParam_check_type_get
    if _newclass:
        check_type = _swig_property(_di_zkp_interface.CheckParam_check_type_get, _di_zkp_interface.CheckParam_check_type_set)
    __swig_setmethods__["l2_param"] = _di_zkp_interface.CheckParam_l2_param_set
    __swig_getmethods__["l2_param"] = _di_zkp_interface.CheckParam_l2_param_get
    if _newclass:
        l2_param = _swig_property(_di_zkp_interface.CheckParam_l2_param_get, _di_zkp_interface.CheckParam_l2_param_set)
    __swig_setmethods__["sphere_param"] = _di_zkp_interface.CheckParam_sphere_param_set
    __swig_getmethods__["sphere_param"] = _di_zkp_interface.CheckParam_sphere_param_get
    if _newclass:
        sphere_param = _swig_property(_di_zkp_interface.CheckParam_sphere_param_get, _di_zkp_interface.CheckParam_sphere_param_set)
    __swig_setmethods__["cosine_param"] = _di_zkp_interface.CheckParam_cosine_param_set
    __swig_getmethods__["cosine_param"] = _di_zkp_interface.CheckParam_cosine_param_get
    if _newclass:
        cosine_param = _swig_property(_di_zkp_interface.CheckParam_cosine_param_get, _di_zkp_interface.CheckParam_cosine_param_set)
    __swig_setmethods__["zeno_param"] = _di_zkp_interface.CheckParam_zeno_param_set
    __swig_getmethods__["zeno_param"] = _di_zkp_interface.CheckParam_zeno_param_get
    if _newclass:
        zeno_param = _swig_property(_di_zkp_interface.CheckParam_zeno_param_get, _di_zkp_interface.CheckParam_zeno_param_set)

    def __init__(self, check_type):
        this = _di_zkp_interface.new_CheckParam(check_type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_CheckParam
    __del__ = lambda self: None
CheckParam_swigregister = _di_zkp_interface.CheckParam_swigregister
CheckParam_swigregister(CheckParam)


def extra_inner_prod(c):
    return _di_zkp_interface.extra_inner_prod(c)
extra_inner_prod = _di_zkp_interface.extra_inner_prod

def extra_square(c):
    return _di_zkp_interface.extra_square(c)
extra_square = _di_zkp_interface.extra_square
class Predicate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Predicate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Predicate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dim"] = _di_zkp_interface.Predicate_dim_set
    __swig_getmethods__["dim"] = _di_zkp_interface.Predicate_dim_get
    if _newclass:
        dim = _swig_property(_di_zkp_interface.Predicate_dim_get, _di_zkp_interface.Predicate_dim_set)
    __swig_setmethods__["num_weight_keys"] = _di_zkp_interface.Predicate_num_weight_keys_set
    __swig_getmethods__["num_weight_keys"] = _di_zkp_interface.Predicate_num_weight_keys_get
    if _newclass:
        num_weight_keys = _swig_property(_di_zkp_interface.Predicate_num_weight_keys_get, _di_zkp_interface.Predicate_num_weight_keys_set)
    __swig_setmethods__["num_blinds_per_group_element"] = _di_zkp_interface.Predicate_num_blinds_per_group_element_set
    __swig_getmethods__["num_blinds_per_group_element"] = _di_zkp_interface.Predicate_num_blinds_per_group_element_get
    if _newclass:
        num_blinds_per_group_element = _swig_property(_di_zkp_interface.Predicate_num_blinds_per_group_element_get, _di_zkp_interface.Predicate_num_blinds_per_group_element_set)
    __swig_setmethods__["num_samples"] = _di_zkp_interface.Predicate_num_samples_set
    __swig_getmethods__["num_samples"] = _di_zkp_interface.Predicate_num_samples_get
    if _newclass:
        num_samples = _swig_property(_di_zkp_interface.Predicate_num_samples_get, _di_zkp_interface.Predicate_num_samples_set)
    __swig_setmethods__["random_normal_bit_shifter"] = _di_zkp_interface.Predicate_random_normal_bit_shifter_set
    __swig_getmethods__["random_normal_bit_shifter"] = _di_zkp_interface.Predicate_random_normal_bit_shifter_get
    if _newclass:
        random_normal_bit_shifter = _swig_property(_di_zkp_interface.Predicate_random_normal_bit_shifter_get, _di_zkp_interface.Predicate_random_normal_bit_shifter_set)
    __swig_setmethods__["inner_prod_bound_bits"] = _di_zkp_interface.Predicate_inner_prod_bound_bits_set
    __swig_getmethods__["inner_prod_bound_bits"] = _di_zkp_interface.Predicate_inner_prod_bound_bits_get
    if _newclass:
        inner_prod_bound_bits = _swig_property(_di_zkp_interface.Predicate_inner_prod_bound_bits_get, _di_zkp_interface.Predicate_inner_prod_bound_bits_set)
    __swig_setmethods__["check_param"] = _di_zkp_interface.Predicate_check_param_set
    __swig_getmethods__["check_param"] = _di_zkp_interface.Predicate_check_param_get
    if _newclass:
        check_param = _swig_property(_di_zkp_interface.Predicate_check_param_get, _di_zkp_interface.Predicate_check_param_set)
    __swig_setmethods__["max_bound_sq_bits"] = _di_zkp_interface.Predicate_max_bound_sq_bits_set
    __swig_getmethods__["max_bound_sq_bits"] = _di_zkp_interface.Predicate_max_bound_sq_bits_get
    if _newclass:
        max_bound_sq_bits = _swig_property(_di_zkp_interface.Predicate_max_bound_sq_bits_get, _di_zkp_interface.Predicate_max_bound_sq_bits_set)
    __swig_setmethods__["bound_elem_keys_1"] = _di_zkp_interface.Predicate_bound_elem_keys_1_set
    __swig_getmethods__["bound_elem_keys_1"] = _di_zkp_interface.Predicate_bound_elem_keys_1_get
    if _newclass:
        bound_elem_keys_1 = _swig_property(_di_zkp_interface.Predicate_bound_elem_keys_1_get, _di_zkp_interface.Predicate_bound_elem_keys_1_set)
    __swig_setmethods__["bound_elem_keys_2"] = _di_zkp_interface.Predicate_bound_elem_keys_2_set
    __swig_getmethods__["bound_elem_keys_2"] = _di_zkp_interface.Predicate_bound_elem_keys_2_get
    if _newclass:
        bound_elem_keys_2 = _swig_property(_di_zkp_interface.Predicate_bound_elem_keys_2_get, _di_zkp_interface.Predicate_bound_elem_keys_2_set)
    __swig_setmethods__["aa_seed"] = _di_zkp_interface.Predicate_aa_seed_set
    __swig_getmethods__["aa_seed"] = _di_zkp_interface.Predicate_aa_seed_get
    if _newclass:
        aa_seed = _swig_property(_di_zkp_interface.Predicate_aa_seed_get, _di_zkp_interface.Predicate_aa_seed_set)
    __swig_setmethods__["hh"] = _di_zkp_interface.Predicate_hh_set
    __swig_getmethods__["hh"] = _di_zkp_interface.Predicate_hh_get
    if _newclass:
        hh = _swig_property(_di_zkp_interface.Predicate_hh_get, _di_zkp_interface.Predicate_hh_set)
    __swig_setmethods__["b_precomp"] = _di_zkp_interface.Predicate_b_precomp_set
    __swig_getmethods__["b_precomp"] = _di_zkp_interface.Predicate_b_precomp_get
    if _newclass:
        b_precomp = _swig_property(_di_zkp_interface.Predicate_b_precomp_get, _di_zkp_interface.Predicate_b_precomp_set)
    __swig_setmethods__["hh_precomp"] = _di_zkp_interface.Predicate_hh_precomp_set
    __swig_getmethods__["hh_precomp"] = _di_zkp_interface.Predicate_hh_precomp_get
    if _newclass:
        hh_precomp = _swig_property(_di_zkp_interface.Predicate_hh_precomp_get, _di_zkp_interface.Predicate_hh_precomp_set)
    __swig_setmethods__["hh_comb"] = _di_zkp_interface.Predicate_hh_comb_set
    __swig_getmethods__["hh_comb"] = _di_zkp_interface.Predicate_hh_comb_get
    if _newclass:
        hh_comb = _swig_property(_di_zkp_interface.Predicate_hh_comb_get, _di_zkp_interface.Predicate_hh_comb_set)
    __swig_setmethods__["square_key"] = _di_zkp_interface.Predicate_square_key_set
    __swig_getmethods__["square_key"] = _di_zkp_interface.Predicate_square_key_get
    if _newclass:
        square_key = _swig_property(_di_zkp_interface.Predicate_square_key_get, _di_zkp_interface.Predicate_square_key_set)

    def __init__(self, dim, num_blinds_per_group_element, num_samples, random_normal_bit_shifter, check_type, inner_prod_bound_bits, max_bound_sq_bits, b_precomp=True):
        this = _di_zkp_interface.new_Predicate(dim, num_blinds_per_group_element, num_samples, random_normal_bit_shifter, check_type, inner_prod_bound_bits, max_bound_sq_bits, b_precomp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initialize_from_seed(self, seed):
        return _di_zkp_interface.Predicate_initialize_from_seed(self, seed)
    __swig_destroy__ = _di_zkp_interface.delete_Predicate
    __del__ = lambda self: None
Predicate_swigregister = _di_zkp_interface.Predicate_swigregister
Predicate_swigregister(Predicate)

class Proof(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Proof, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Proof, name)
    __repr__ = _swig_repr
    __swig_setmethods__["check_type"] = _di_zkp_interface.Proof_check_type_set
    __swig_getmethods__["check_type"] = _di_zkp_interface.Proof_check_type_get
    if _newclass:
        check_type = _swig_property(_di_zkp_interface.Proof_check_type_get, _di_zkp_interface.Proof_check_type_set)
    __swig_setmethods__["linear_comb_batch_commitments"] = _di_zkp_interface.Proof_linear_comb_batch_commitments_set
    __swig_getmethods__["linear_comb_batch_commitments"] = _di_zkp_interface.Proof_linear_comb_batch_commitments_get
    if _newclass:
        linear_comb_batch_commitments = _swig_property(_di_zkp_interface.Proof_linear_comb_batch_commitments_get, _di_zkp_interface.Proof_linear_comb_batch_commitments_set)
    __swig_setmethods__["linear_comb_single_commitments"] = _di_zkp_interface.Proof_linear_comb_single_commitments_set
    __swig_getmethods__["linear_comb_single_commitments"] = _di_zkp_interface.Proof_linear_comb_single_commitments_get
    if _newclass:
        linear_comb_single_commitments = _swig_property(_di_zkp_interface.Proof_linear_comb_single_commitments_get, _di_zkp_interface.Proof_linear_comb_single_commitments_set)
    __swig_setmethods__["proof_well_formed"] = _di_zkp_interface.Proof_proof_well_formed_set
    __swig_getmethods__["proof_well_formed"] = _di_zkp_interface.Proof_proof_well_formed_get
    if _newclass:
        proof_well_formed = _swig_property(_di_zkp_interface.Proof_proof_well_formed_get, _di_zkp_interface.Proof_proof_well_formed_set)
    __swig_setmethods__["proof_linear_comb_bound"] = _di_zkp_interface.Proof_proof_linear_comb_bound_set
    __swig_getmethods__["proof_linear_comb_bound"] = _di_zkp_interface.Proof_proof_linear_comb_bound_get
    if _newclass:
        proof_linear_comb_bound = _swig_property(_di_zkp_interface.Proof_proof_linear_comb_bound_get, _di_zkp_interface.Proof_proof_linear_comb_bound_set)
    __swig_setmethods__["square_commitments"] = _di_zkp_interface.Proof_square_commitments_set
    __swig_getmethods__["square_commitments"] = _di_zkp_interface.Proof_square_commitments_get
    if _newclass:
        square_commitments = _swig_property(_di_zkp_interface.Proof_square_commitments_get, _di_zkp_interface.Proof_square_commitments_set)
    __swig_setmethods__["proof_squares"] = _di_zkp_interface.Proof_proof_squares_set
    __swig_getmethods__["proof_squares"] = _di_zkp_interface.Proof_proof_squares_get
    if _newclass:
        proof_squares = _swig_property(_di_zkp_interface.Proof_proof_squares_get, _di_zkp_interface.Proof_proof_squares_set)
    __swig_setmethods__["proof_sum_range"] = _di_zkp_interface.Proof_proof_sum_range_set
    __swig_getmethods__["proof_sum_range"] = _di_zkp_interface.Proof_proof_sum_range_get
    if _newclass:
        proof_sum_range = _swig_property(_di_zkp_interface.Proof_proof_sum_range_get, _di_zkp_interface.Proof_proof_sum_range_set)
    __swig_setmethods__["proof_sum_range_for_cosine"] = _di_zkp_interface.Proof_proof_sum_range_for_cosine_set
    __swig_getmethods__["proof_sum_range_for_cosine"] = _di_zkp_interface.Proof_proof_sum_range_for_cosine_get
    if _newclass:
        proof_sum_range_for_cosine = _swig_property(_di_zkp_interface.Proof_proof_sum_range_for_cosine_get, _di_zkp_interface.Proof_proof_sum_range_for_cosine_set)

    def __init__(self, check_type, num_blinds_per_group_element, num_norm_bound_samples, inner_prod_bound_bits, sum_bound_bits):
        this = _di_zkp_interface.new_Proof(check_type, num_blinds_per_group_element, num_norm_bound_samples, inner_prod_bound_bits, sum_bound_bits)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        size = staticmethod(_di_zkp_interface.Proof_size)
    else:
        size = _di_zkp_interface.Proof_size

    def export_to_bytestream(self, it):
        return _di_zkp_interface.Proof_export_to_bytestream(self, it)

    def import_from_bytestream(self, it):
        return _di_zkp_interface.Proof_import_from_bytestream(self, it)
    __swig_destroy__ = _di_zkp_interface.delete_Proof
    __del__ = lambda self: None
Proof_swigregister = _di_zkp_interface.Proof_swigregister
Proof_swigregister(Proof)

def Proof_size(check_type, num_blinds_per_group_element, num_norm_bound_samples, inner_prod_bound_bits, sq_sum_bound_bits):
    return _di_zkp_interface.Proof_size(check_type, num_blinds_per_group_element, num_norm_bound_samples, inner_prod_bound_bits, sq_sum_bound_bits)
Proof_size = _di_zkp_interface.Proof_size

PROTOCOL_TYPE_PRIV = _di_zkp_interface.PROTOCOL_TYPE_PRIV
PROTOCOL_TYPE_NON_PRIV_INT = _di_zkp_interface.PROTOCOL_TYPE_NON_PRIV_INT
PROTOCOL_TYPE_NON_PRIV_FLOAT = _di_zkp_interface.PROTOCOL_TYPE_NON_PRIV_FLOAT
class L2NormCheckParamFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2NormCheckParamFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L2NormCheckParamFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bound"] = _di_zkp_interface.L2NormCheckParamFloat_bound_set
    __swig_getmethods__["bound"] = _di_zkp_interface.L2NormCheckParamFloat_bound_get
    if _newclass:
        bound = _swig_property(_di_zkp_interface.L2NormCheckParamFloat_bound_get, _di_zkp_interface.L2NormCheckParamFloat_bound_set)

    def __init__(self):
        this = _di_zkp_interface.new_L2NormCheckParamFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_L2NormCheckParamFloat
    __del__ = lambda self: None
L2NormCheckParamFloat_swigregister = _di_zkp_interface.L2NormCheckParamFloat_swigregister
L2NormCheckParamFloat_swigregister(L2NormCheckParamFloat)

class SphereCheckParamFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereCheckParamFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SphereCheckParamFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bound"] = _di_zkp_interface.SphereCheckParamFloat_bound_set
    __swig_getmethods__["bound"] = _di_zkp_interface.SphereCheckParamFloat_bound_get
    if _newclass:
        bound = _swig_property(_di_zkp_interface.SphereCheckParamFloat_bound_get, _di_zkp_interface.SphereCheckParamFloat_bound_set)
    __swig_setmethods__["center"] = _di_zkp_interface.SphereCheckParamFloat_center_set
    __swig_getmethods__["center"] = _di_zkp_interface.SphereCheckParamFloat_center_get
    if _newclass:
        center = _swig_property(_di_zkp_interface.SphereCheckParamFloat_center_get, _di_zkp_interface.SphereCheckParamFloat_center_set)

    def __init__(self):
        this = _di_zkp_interface.new_SphereCheckParamFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_SphereCheckParamFloat
    __del__ = lambda self: None
SphereCheckParamFloat_swigregister = _di_zkp_interface.SphereCheckParamFloat_swigregister
SphereCheckParamFloat_swigregister(SphereCheckParamFloat)

class CosineSimCheckParamFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosineSimCheckParamFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CosineSimCheckParamFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bound"] = _di_zkp_interface.CosineSimCheckParamFloat_bound_set
    __swig_getmethods__["bound"] = _di_zkp_interface.CosineSimCheckParamFloat_bound_get
    if _newclass:
        bound = _swig_property(_di_zkp_interface.CosineSimCheckParamFloat_bound_get, _di_zkp_interface.CosineSimCheckParamFloat_bound_set)
    __swig_setmethods__["pivot"] = _di_zkp_interface.CosineSimCheckParamFloat_pivot_set
    __swig_getmethods__["pivot"] = _di_zkp_interface.CosineSimCheckParamFloat_pivot_get
    if _newclass:
        pivot = _swig_property(_di_zkp_interface.CosineSimCheckParamFloat_pivot_get, _di_zkp_interface.CosineSimCheckParamFloat_pivot_set)
    __swig_setmethods__["cosine_bound"] = _di_zkp_interface.CosineSimCheckParamFloat_cosine_bound_set
    __swig_getmethods__["cosine_bound"] = _di_zkp_interface.CosineSimCheckParamFloat_cosine_bound_get
    if _newclass:
        cosine_bound = _swig_property(_di_zkp_interface.CosineSimCheckParamFloat_cosine_bound_get, _di_zkp_interface.CosineSimCheckParamFloat_cosine_bound_set)

    def __init__(self):
        this = _di_zkp_interface.new_CosineSimCheckParamFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_CosineSimCheckParamFloat
    __del__ = lambda self: None
CosineSimCheckParamFloat_swigregister = _di_zkp_interface.CosineSimCheckParamFloat_swigregister
CosineSimCheckParamFloat_swigregister(CosineSimCheckParamFloat)

class ZenoCheckParamFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZenoCheckParamFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZenoCheckParamFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pivot"] = _di_zkp_interface.ZenoCheckParamFloat_pivot_set
    __swig_getmethods__["pivot"] = _di_zkp_interface.ZenoCheckParamFloat_pivot_get
    if _newclass:
        pivot = _swig_property(_di_zkp_interface.ZenoCheckParamFloat_pivot_get, _di_zkp_interface.ZenoCheckParamFloat_pivot_set)
    __swig_setmethods__["gamma"] = _di_zkp_interface.ZenoCheckParamFloat_gamma_set
    __swig_getmethods__["gamma"] = _di_zkp_interface.ZenoCheckParamFloat_gamma_get
    if _newclass:
        gamma = _swig_property(_di_zkp_interface.ZenoCheckParamFloat_gamma_get, _di_zkp_interface.ZenoCheckParamFloat_gamma_set)
    __swig_setmethods__["rho"] = _di_zkp_interface.ZenoCheckParamFloat_rho_set
    __swig_getmethods__["rho"] = _di_zkp_interface.ZenoCheckParamFloat_rho_get
    if _newclass:
        rho = _swig_property(_di_zkp_interface.ZenoCheckParamFloat_rho_get, _di_zkp_interface.ZenoCheckParamFloat_rho_set)
    __swig_setmethods__["eps"] = _di_zkp_interface.ZenoCheckParamFloat_eps_set
    __swig_getmethods__["eps"] = _di_zkp_interface.ZenoCheckParamFloat_eps_get
    if _newclass:
        eps = _swig_property(_di_zkp_interface.ZenoCheckParamFloat_eps_get, _di_zkp_interface.ZenoCheckParamFloat_eps_set)

    def __init__(self):
        this = _di_zkp_interface.new_ZenoCheckParamFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_ZenoCheckParamFloat
    __del__ = lambda self: None
ZenoCheckParamFloat_swigregister = _di_zkp_interface.ZenoCheckParamFloat_swigregister
ZenoCheckParamFloat_swigregister(ZenoCheckParamFloat)

class CheckParamFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckParamFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CheckParamFloat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["check_type"] = _di_zkp_interface.CheckParamFloat_check_type_set
    __swig_getmethods__["check_type"] = _di_zkp_interface.CheckParamFloat_check_type_get
    if _newclass:
        check_type = _swig_property(_di_zkp_interface.CheckParamFloat_check_type_get, _di_zkp_interface.CheckParamFloat_check_type_set)
    __swig_setmethods__["l2_param"] = _di_zkp_interface.CheckParamFloat_l2_param_set
    __swig_getmethods__["l2_param"] = _di_zkp_interface.CheckParamFloat_l2_param_get
    if _newclass:
        l2_param = _swig_property(_di_zkp_interface.CheckParamFloat_l2_param_get, _di_zkp_interface.CheckParamFloat_l2_param_set)
    __swig_setmethods__["sphere_param"] = _di_zkp_interface.CheckParamFloat_sphere_param_set
    __swig_getmethods__["sphere_param"] = _di_zkp_interface.CheckParamFloat_sphere_param_get
    if _newclass:
        sphere_param = _swig_property(_di_zkp_interface.CheckParamFloat_sphere_param_get, _di_zkp_interface.CheckParamFloat_sphere_param_set)
    __swig_setmethods__["cosine_param"] = _di_zkp_interface.CheckParamFloat_cosine_param_set
    __swig_getmethods__["cosine_param"] = _di_zkp_interface.CheckParamFloat_cosine_param_get
    if _newclass:
        cosine_param = _swig_property(_di_zkp_interface.CheckParamFloat_cosine_param_get, _di_zkp_interface.CheckParamFloat_cosine_param_set)
    __swig_setmethods__["zeno_param"] = _di_zkp_interface.CheckParamFloat_zeno_param_set
    __swig_getmethods__["zeno_param"] = _di_zkp_interface.CheckParamFloat_zeno_param_get
    if _newclass:
        zeno_param = _swig_property(_di_zkp_interface.CheckParamFloat_zeno_param_get, _di_zkp_interface.CheckParamFloat_zeno_param_set)

    def __init__(self, check_type):
        this = _di_zkp_interface.new_CheckParamFloat(check_type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_CheckParamFloat
    __del__ = lambda self: None
CheckParamFloat_swigregister = _di_zkp_interface.CheckParamFloat_swigregister
CheckParamFloat_swigregister(CheckParamFloat)

class CommonInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommonInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommonInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["protocol_type"] = _di_zkp_interface.CommonInterface_protocol_type_set
    __swig_getmethods__["protocol_type"] = _di_zkp_interface.CommonInterface_protocol_type_get
    if _newclass:
        protocol_type = _swig_property(_di_zkp_interface.CommonInterface_protocol_type_get, _di_zkp_interface.CommonInterface_protocol_type_set)
    __swig_setmethods__["normalizing_factor"] = _di_zkp_interface.CommonInterface_normalizing_factor_set
    __swig_getmethods__["normalizing_factor"] = _di_zkp_interface.CommonInterface_normalizing_factor_get
    if _newclass:
        normalizing_factor = _swig_property(_di_zkp_interface.CommonInterface_normalizing_factor_get, _di_zkp_interface.CommonInterface_normalizing_factor_set)
    __swig_setmethods__["num_clients"] = _di_zkp_interface.CommonInterface_num_clients_set
    __swig_getmethods__["num_clients"] = _di_zkp_interface.CommonInterface_num_clients_get
    if _newclass:
        num_clients = _swig_property(_di_zkp_interface.CommonInterface_num_clients_get, _di_zkp_interface.CommonInterface_num_clients_set)
    __swig_setmethods__["max_malicious_clients"] = _di_zkp_interface.CommonInterface_max_malicious_clients_set
    __swig_getmethods__["max_malicious_clients"] = _di_zkp_interface.CommonInterface_max_malicious_clients_get
    if _newclass:
        max_malicious_clients = _swig_property(_di_zkp_interface.CommonInterface_max_malicious_clients_get, _di_zkp_interface.CommonInterface_max_malicious_clients_set)
    __swig_setmethods__["dim"] = _di_zkp_interface.CommonInterface_dim_set
    __swig_getmethods__["dim"] = _di_zkp_interface.CommonInterface_dim_get
    if _newclass:
        dim = _swig_property(_di_zkp_interface.CommonInterface_dim_get, _di_zkp_interface.CommonInterface_dim_set)
    __swig_setmethods__["weight_bits"] = _di_zkp_interface.CommonInterface_weight_bits_set
    __swig_getmethods__["weight_bits"] = _di_zkp_interface.CommonInterface_weight_bits_get
    if _newclass:
        weight_bits = _swig_property(_di_zkp_interface.CommonInterface_weight_bits_get, _di_zkp_interface.CommonInterface_weight_bits_set)
    __swig_setmethods__["server_flags"] = _di_zkp_interface.CommonInterface_server_flags_set
    __swig_getmethods__["server_flags"] = _di_zkp_interface.CommonInterface_server_flags_get
    if _newclass:
        server_flags = _swig_property(_di_zkp_interface.CommonInterface_server_flags_get, _di_zkp_interface.CommonInterface_server_flags_set)
    __swig_setmethods__["dh_public_key_collection"] = _di_zkp_interface.CommonInterface_dh_public_key_collection_set
    __swig_getmethods__["dh_public_key_collection"] = _di_zkp_interface.CommonInterface_dh_public_key_collection_get
    if _newclass:
        dh_public_key_collection = _swig_property(_di_zkp_interface.CommonInterface_dh_public_key_collection_get, _di_zkp_interface.CommonInterface_dh_public_key_collection_set)
    __swig_setmethods__["bul_signed_pub_key_collection"] = _di_zkp_interface.CommonInterface_bul_signed_pub_key_collection_set
    __swig_getmethods__["bul_signed_pub_key_collection"] = _di_zkp_interface.CommonInterface_bul_signed_pub_key_collection_get
    if _newclass:
        bul_signed_pub_key_collection = _swig_property(_di_zkp_interface.CommonInterface_bul_signed_pub_key_collection_get, _di_zkp_interface.CommonInterface_bul_signed_pub_key_collection_set)
    __swig_setmethods__["predicate"] = _di_zkp_interface.CommonInterface_predicate_set
    __swig_getmethods__["predicate"] = _di_zkp_interface.CommonInterface_predicate_get
    if _newclass:
        predicate = _swig_property(_di_zkp_interface.CommonInterface_predicate_get, _di_zkp_interface.CommonInterface_predicate_set)
    __swig_setmethods__["shamir_check_string_collection"] = _di_zkp_interface.CommonInterface_shamir_check_string_collection_set
    __swig_getmethods__["shamir_check_string_collection"] = _di_zkp_interface.CommonInterface_shamir_check_string_collection_get
    if _newclass:
        shamir_check_string_collection = _swig_property(_di_zkp_interface.CommonInterface_shamir_check_string_collection_get, _di_zkp_interface.CommonInterface_shamir_check_string_collection_set)

    def __init__(self, *args):
        this = _di_zkp_interface.new_CommonInterface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_param(self, c):
        return _di_zkp_interface.CommonInterface_set_param(self, c)

    def set_normalizing_factor_and_compute_check_param_from_gamma(self, check_param_float):
        return _di_zkp_interface.CommonInterface_set_normalizing_factor_and_compute_check_param_from_gamma(self, check_param_float)

    def reset_server_flags(self):
        return _di_zkp_interface.CommonInterface_reset_server_flags(self)

    def valid_client_count(self):
        return _di_zkp_interface.CommonInterface_valid_client_count(self)
    __swig_destroy__ = _di_zkp_interface.delete_CommonInterface
    __del__ = lambda self: None
CommonInterface_swigregister = _di_zkp_interface.CommonInterface_swigregister
CommonInterface_swigregister(CommonInterface)


def import_flags_start_from_1_from_bytestream(flags, it):
    return _di_zkp_interface.import_flags_start_from_1_from_bytestream(flags, it)
import_flags_start_from_1_from_bytestream = _di_zkp_interface.import_flags_start_from_1_from_bytestream

def export_flags_start_from_1_to_bytestream(flags, it):
    return _di_zkp_interface.export_flags_start_from_1_to_bytestream(flags, it)
export_flags_start_from_1_to_bytestream = _di_zkp_interface.export_flags_start_from_1_to_bytestream
class ClientInterface(CommonInterface):
    __swig_setmethods__ = {}
    for _s in [CommonInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [CommonInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClientInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["client_id"] = _di_zkp_interface.ClientInterface_client_id_set
    __swig_getmethods__["client_id"] = _di_zkp_interface.ClientInterface_client_id_get
    if _newclass:
        client_id = _swig_property(_di_zkp_interface.ClientInterface_client_id_get, _di_zkp_interface.ClientInterface_client_id_set)
    __swig_setmethods__["bul_pub_keys"] = _di_zkp_interface.ClientInterface_bul_pub_keys_set
    __swig_getmethods__["bul_pub_keys"] = _di_zkp_interface.ClientInterface_bul_pub_keys_get
    if _newclass:
        bul_pub_keys = _swig_property(_di_zkp_interface.ClientInterface_bul_pub_keys_get, _di_zkp_interface.ClientInterface_bul_pub_keys_set)
    __swig_setmethods__["bul_prv_key"] = _di_zkp_interface.ClientInterface_bul_prv_key_set
    __swig_getmethods__["bul_prv_key"] = _di_zkp_interface.ClientInterface_bul_prv_key_get
    if _newclass:
        bul_prv_key = _swig_property(_di_zkp_interface.ClientInterface_bul_prv_key_get, _di_zkp_interface.ClientInterface_bul_prv_key_set)
    __swig_setmethods__["weight_updates"] = _di_zkp_interface.ClientInterface_weight_updates_set
    __swig_getmethods__["weight_updates"] = _di_zkp_interface.ClientInterface_weight_updates_get
    if _newclass:
        weight_updates = _swig_property(_di_zkp_interface.ClientInterface_weight_updates_get, _di_zkp_interface.ClientInterface_weight_updates_set)
    __swig_setmethods__["blinds_to_share"] = _di_zkp_interface.ClientInterface_blinds_to_share_set
    __swig_getmethods__["blinds_to_share"] = _di_zkp_interface.ClientInterface_blinds_to_share_get
    if _newclass:
        blinds_to_share = _swig_property(_di_zkp_interface.ClientInterface_blinds_to_share_get, _di_zkp_interface.ClientInterface_blinds_to_share_set)
    __swig_setmethods__["dh_public_key"] = _di_zkp_interface.ClientInterface_dh_public_key_set
    __swig_getmethods__["dh_public_key"] = _di_zkp_interface.ClientInterface_dh_public_key_get
    if _newclass:
        dh_public_key = _swig_property(_di_zkp_interface.ClientInterface_dh_public_key_get, _di_zkp_interface.ClientInterface_dh_public_key_set)
    __swig_setmethods__["dh_private_key"] = _di_zkp_interface.ClientInterface_dh_private_key_set
    __swig_getmethods__["dh_private_key"] = _di_zkp_interface.ClientInterface_dh_private_key_get
    if _newclass:
        dh_private_key = _swig_property(_di_zkp_interface.ClientInterface_dh_private_key_get, _di_zkp_interface.ClientInterface_dh_private_key_set)
    __swig_setmethods__["batch_shamir_share_with_check"] = _di_zkp_interface.ClientInterface_batch_shamir_share_with_check_set
    __swig_getmethods__["batch_shamir_share_with_check"] = _di_zkp_interface.ClientInterface_batch_shamir_share_with_check_get
    if _newclass:
        batch_shamir_share_with_check = _swig_property(_di_zkp_interface.ClientInterface_batch_shamir_share_with_check_get, _di_zkp_interface.ClientInterface_batch_shamir_share_with_check_set)
    __swig_setmethods__["encrypted_shamir_shares"] = _di_zkp_interface.ClientInterface_encrypted_shamir_shares_set
    __swig_getmethods__["encrypted_shamir_shares"] = _di_zkp_interface.ClientInterface_encrypted_shamir_shares_get
    if _newclass:
        encrypted_shamir_shares = _swig_property(_di_zkp_interface.ClientInterface_encrypted_shamir_shares_get, _di_zkp_interface.ClientInterface_encrypted_shamir_shares_set)
    __swig_setmethods__["proof"] = _di_zkp_interface.ClientInterface_proof_set
    __swig_getmethods__["proof"] = _di_zkp_interface.ClientInterface_proof_get
    if _newclass:
        proof = _swig_property(_di_zkp_interface.ClientInterface_proof_get, _di_zkp_interface.ClientInterface_proof_set)
    __swig_setmethods__["other_encrypted_shamir_shares"] = _di_zkp_interface.ClientInterface_other_encrypted_shamir_shares_set
    __swig_getmethods__["other_encrypted_shamir_shares"] = _di_zkp_interface.ClientInterface_other_encrypted_shamir_shares_get
    if _newclass:
        other_encrypted_shamir_shares = _swig_property(_di_zkp_interface.ClientInterface_other_encrypted_shamir_shares_get, _di_zkp_interface.ClientInterface_other_encrypted_shamir_shares_set)
    __swig_setmethods__["other_shamir_shares"] = _di_zkp_interface.ClientInterface_other_shamir_shares_set
    __swig_getmethods__["other_shamir_shares"] = _di_zkp_interface.ClientInterface_other_shamir_shares_get
    if _newclass:
        other_shamir_shares = _swig_property(_di_zkp_interface.ClientInterface_other_shamir_shares_get, _di_zkp_interface.ClientInterface_other_shamir_shares_set)
    __swig_setmethods__["flags"] = _di_zkp_interface.ClientInterface_flags_set
    __swig_getmethods__["flags"] = _di_zkp_interface.ClientInterface_flags_get
    if _newclass:
        flags = _swig_property(_di_zkp_interface.ClientInterface_flags_get, _di_zkp_interface.ClientInterface_flags_set)
    __swig_setmethods__["dispute_clients"] = _di_zkp_interface.ClientInterface_dispute_clients_set
    __swig_getmethods__["dispute_clients"] = _di_zkp_interface.ClientInterface_dispute_clients_get
    if _newclass:
        dispute_clients = _swig_property(_di_zkp_interface.ClientInterface_dispute_clients_get, _di_zkp_interface.ClientInterface_dispute_clients_set)
    __swig_setmethods__["dispute_shares"] = _di_zkp_interface.ClientInterface_dispute_shares_set
    __swig_getmethods__["dispute_shares"] = _di_zkp_interface.ClientInterface_dispute_shares_get
    if _newclass:
        dispute_shares = _swig_property(_di_zkp_interface.ClientInterface_dispute_shares_get, _di_zkp_interface.ClientInterface_dispute_shares_set)
    __swig_setmethods__["other_dispute_shares"] = _di_zkp_interface.ClientInterface_other_dispute_shares_set
    __swig_getmethods__["other_dispute_shares"] = _di_zkp_interface.ClientInterface_other_dispute_shares_get
    if _newclass:
        other_dispute_shares = _swig_property(_di_zkp_interface.ClientInterface_other_dispute_shares_get, _di_zkp_interface.ClientInterface_other_dispute_shares_set)
    __swig_setmethods__["aggregates"] = _di_zkp_interface.ClientInterface_aggregates_set
    __swig_getmethods__["aggregates"] = _di_zkp_interface.ClientInterface_aggregates_get
    if _newclass:
        aggregates = _swig_property(_di_zkp_interface.ClientInterface_aggregates_get, _di_zkp_interface.ClientInterface_aggregates_set)

    def __init__(self, *args):
        this = _di_zkp_interface.new_ClientInterface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def import_weight_updates(self, u):
        return _di_zkp_interface.ClientInterface_import_weight_updates(self, u)

    def reset_flags(self):
        return _di_zkp_interface.ClientInterface_reset_flags(self)

    def generate_dh_key_pair(self):
        return _di_zkp_interface.ClientInterface_generate_dh_key_pair(self)

    def generate_batch_shares_and_check_string(self):
        return _di_zkp_interface.ClientInterface_generate_batch_shares_and_check_string(self)

    def encrypt_shares(self):
        return _di_zkp_interface.ClientInterface_encrypt_shares(self)

    def set_aa_seed(self, s):
        return _di_zkp_interface.ClientInterface_set_aa_seed(self, s)

    def generate_proof(self):
        return _di_zkp_interface.ClientInterface_generate_proof(self)

    def decrypt_shamir_shares(self):
        return _di_zkp_interface.ClientInterface_decrypt_shamir_shares(self)

    def check_shamir_share_integrity(self):
        return _di_zkp_interface.ClientInterface_check_shamir_share_integrity(self)

    def generate_dispute_shares(self):
        return _di_zkp_interface.ClientInterface_generate_dispute_shares(self)

    def update_other_shamir_shares_with_dispute(self):
        return _di_zkp_interface.ClientInterface_update_other_shamir_shares_with_dispute(self)

    def compute_aggegrated_share(self):
        return _di_zkp_interface.ClientInterface_compute_aggegrated_share(self)

    def initialize_from_seed(self, seed):
        return _di_zkp_interface.ClientInterface_initialize_from_seed(self, seed)

    def send_1_internal(self, check_param, u):
        return _di_zkp_interface.ClientInterface_send_1_internal(self, check_param, u)

    def send_1_bytes(self, check_param_float, u_float):
        return _di_zkp_interface.ClientInterface_send_1_bytes(self, check_param_float, u_float)

    def send_1(self, check_param_float, u_float):
        return _di_zkp_interface.ClientInterface_send_1(self, check_param_float, u_float)

    def receive_and_send_2_bytes(self, bytes):
        return _di_zkp_interface.ClientInterface_receive_and_send_2_bytes(self, bytes)

    def receive_and_send_2(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_2(self, bytes_str)

    def receive_and_send_3_bytes(self, bytes):
        return _di_zkp_interface.ClientInterface_receive_and_send_3_bytes(self, bytes)

    def receive_and_send_3(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_3(self, bytes_str)

    def receive_and_send_4_bytes(self, bytes):
        return _di_zkp_interface.ClientInterface_receive_and_send_4_bytes(self, bytes)

    def receive_and_send_4(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_4(self, bytes_str)

    def receive_and_send_5_bytes(self, bytes):
        return _di_zkp_interface.ClientInterface_receive_and_send_5_bytes(self, bytes)

    def receive_and_send_5(self, bytes_str):
        return _di_zkp_interface.ClientInterface_receive_and_send_5(self, bytes_str)
    __swig_destroy__ = _di_zkp_interface.delete_ClientInterface
    __del__ = lambda self: None
ClientInterface_swigregister = _di_zkp_interface.ClientInterface_swigregister
ClientInterface_swigregister(ClientInterface)

class VecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _di_zkp_interface.VecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _di_zkp_interface.VecFloat___nonzero__(self)

    def __bool__(self):
        return _di_zkp_interface.VecFloat___bool__(self)

    def __len__(self):
        return _di_zkp_interface.VecFloat___len__(self)

    def __getslice__(self, i, j):
        return _di_zkp_interface.VecFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _di_zkp_interface.VecFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _di_zkp_interface.VecFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _di_zkp_interface.VecFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _di_zkp_interface.VecFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _di_zkp_interface.VecFloat___setitem__(self, *args)

    def pop(self):
        return _di_zkp_interface.VecFloat_pop(self)

    def append(self, x):
        return _di_zkp_interface.VecFloat_append(self, x)

    def empty(self):
        return _di_zkp_interface.VecFloat_empty(self)

    def size(self):
        return _di_zkp_interface.VecFloat_size(self)

    def swap(self, v):
        return _di_zkp_interface.VecFloat_swap(self, v)

    def begin(self):
        return _di_zkp_interface.VecFloat_begin(self)

    def end(self):
        return _di_zkp_interface.VecFloat_end(self)

    def rbegin(self):
        return _di_zkp_interface.VecFloat_rbegin(self)

    def rend(self):
        return _di_zkp_interface.VecFloat_rend(self)

    def clear(self):
        return _di_zkp_interface.VecFloat_clear(self)

    def get_allocator(self):
        return _di_zkp_interface.VecFloat_get_allocator(self)

    def pop_back(self):
        return _di_zkp_interface.VecFloat_pop_back(self)

    def erase(self, *args):
        return _di_zkp_interface.VecFloat_erase(self, *args)

    def __init__(self, *args):
        this = _di_zkp_interface.new_VecFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _di_zkp_interface.VecFloat_push_back(self, x)

    def front(self):
        return _di_zkp_interface.VecFloat_front(self)

    def back(self):
        return _di_zkp_interface.VecFloat_back(self)

    def assign(self, n, x):
        return _di_zkp_interface.VecFloat_assign(self, n, x)

    def resize(self, *args):
        return _di_zkp_interface.VecFloat_resize(self, *args)

    def insert(self, *args):
        return _di_zkp_interface.VecFloat_insert(self, *args)

    def reserve(self, n):
        return _di_zkp_interface.VecFloat_reserve(self, n)

    def capacity(self):
        return _di_zkp_interface.VecFloat_capacity(self)
    __swig_destroy__ = _di_zkp_interface.delete_VecFloat
    __del__ = lambda self: None
VecFloat_swigregister = _di_zkp_interface.VecFloat_swigregister
VecFloat_swigregister(VecFloat)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _di_zkp_interface.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _di_zkp_interface.VecInt___nonzero__(self)

    def __bool__(self):
        return _di_zkp_interface.VecInt___bool__(self)

    def __len__(self):
        return _di_zkp_interface.VecInt___len__(self)

    def __getslice__(self, i, j):
        return _di_zkp_interface.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _di_zkp_interface.VecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _di_zkp_interface.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _di_zkp_interface.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _di_zkp_interface.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _di_zkp_interface.VecInt___setitem__(self, *args)

    def pop(self):
        return _di_zkp_interface.VecInt_pop(self)

    def append(self, x):
        return _di_zkp_interface.VecInt_append(self, x)

    def empty(self):
        return _di_zkp_interface.VecInt_empty(self)

    def size(self):
        return _di_zkp_interface.VecInt_size(self)

    def swap(self, v):
        return _di_zkp_interface.VecInt_swap(self, v)

    def begin(self):
        return _di_zkp_interface.VecInt_begin(self)

    def end(self):
        return _di_zkp_interface.VecInt_end(self)

    def rbegin(self):
        return _di_zkp_interface.VecInt_rbegin(self)

    def rend(self):
        return _di_zkp_interface.VecInt_rend(self)

    def clear(self):
        return _di_zkp_interface.VecInt_clear(self)

    def get_allocator(self):
        return _di_zkp_interface.VecInt_get_allocator(self)

    def pop_back(self):
        return _di_zkp_interface.VecInt_pop_back(self)

    def erase(self, *args):
        return _di_zkp_interface.VecInt_erase(self, *args)

    def __init__(self, *args):
        this = _di_zkp_interface.new_VecInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _di_zkp_interface.VecInt_push_back(self, x)

    def front(self):
        return _di_zkp_interface.VecInt_front(self)

    def back(self):
        return _di_zkp_interface.VecInt_back(self)

    def assign(self, n, x):
        return _di_zkp_interface.VecInt_assign(self, n, x)

    def resize(self, *args):
        return _di_zkp_interface.VecInt_resize(self, *args)

    def insert(self, *args):
        return _di_zkp_interface.VecInt_insert(self, *args)

    def reserve(self, n):
        return _di_zkp_interface.VecInt_reserve(self, n)

    def capacity(self):
        return _di_zkp_interface.VecInt_capacity(self)
    __swig_destroy__ = _di_zkp_interface.delete_VecInt
    __del__ = lambda self: None
VecInt_swigregister = _di_zkp_interface.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _di_zkp_interface.VecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _di_zkp_interface.VecVecFloat___nonzero__(self)

    def __bool__(self):
        return _di_zkp_interface.VecVecFloat___bool__(self)

    def __len__(self):
        return _di_zkp_interface.VecVecFloat___len__(self)

    def __getslice__(self, i, j):
        return _di_zkp_interface.VecVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _di_zkp_interface.VecVecFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _di_zkp_interface.VecVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _di_zkp_interface.VecVecFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _di_zkp_interface.VecVecFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _di_zkp_interface.VecVecFloat___setitem__(self, *args)

    def pop(self):
        return _di_zkp_interface.VecVecFloat_pop(self)

    def append(self, x):
        return _di_zkp_interface.VecVecFloat_append(self, x)

    def empty(self):
        return _di_zkp_interface.VecVecFloat_empty(self)

    def size(self):
        return _di_zkp_interface.VecVecFloat_size(self)

    def swap(self, v):
        return _di_zkp_interface.VecVecFloat_swap(self, v)

    def begin(self):
        return _di_zkp_interface.VecVecFloat_begin(self)

    def end(self):
        return _di_zkp_interface.VecVecFloat_end(self)

    def rbegin(self):
        return _di_zkp_interface.VecVecFloat_rbegin(self)

    def rend(self):
        return _di_zkp_interface.VecVecFloat_rend(self)

    def clear(self):
        return _di_zkp_interface.VecVecFloat_clear(self)

    def get_allocator(self):
        return _di_zkp_interface.VecVecFloat_get_allocator(self)

    def pop_back(self):
        return _di_zkp_interface.VecVecFloat_pop_back(self)

    def erase(self, *args):
        return _di_zkp_interface.VecVecFloat_erase(self, *args)

    def __init__(self, *args):
        this = _di_zkp_interface.new_VecVecFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _di_zkp_interface.VecVecFloat_push_back(self, x)

    def front(self):
        return _di_zkp_interface.VecVecFloat_front(self)

    def back(self):
        return _di_zkp_interface.VecVecFloat_back(self)

    def assign(self, n, x):
        return _di_zkp_interface.VecVecFloat_assign(self, n, x)

    def resize(self, *args):
        return _di_zkp_interface.VecVecFloat_resize(self, *args)

    def insert(self, *args):
        return _di_zkp_interface.VecVecFloat_insert(self, *args)

    def reserve(self, n):
        return _di_zkp_interface.VecVecFloat_reserve(self, n)

    def capacity(self):
        return _di_zkp_interface.VecVecFloat_capacity(self)
    __swig_destroy__ = _di_zkp_interface.delete_VecVecFloat
    __del__ = lambda self: None
VecVecFloat_swigregister = _di_zkp_interface.VecVecFloat_swigregister
VecVecFloat_swigregister(VecVecFloat)

class RistElemHasher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RistElemHasher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RistElemHasher, name)
    __repr__ = _swig_repr

    def __call__(self, h):
        return _di_zkp_interface.RistElemHasher___call__(self, h)

    def __init__(self):
        this = _di_zkp_interface.new_RistElemHasher()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_RistElemHasher
    __del__ = lambda self: None
RistElemHasher_swigregister = _di_zkp_interface.RistElemHasher_swigregister
RistElemHasher_swigregister(RistElemHasher)


def gen_mal_list_1_to_m(m):
    return _di_zkp_interface.gen_mal_list_1_to_m(m)
gen_mal_list_1_to_m = _di_zkp_interface.gen_mal_list_1_to_m
class ServerInterface(CommonInterface):
    __swig_setmethods__ = {}
    for _s in [CommonInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [CommonInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags_collection"] = _di_zkp_interface.ServerInterface_flags_collection_set
    __swig_getmethods__["flags_collection"] = _di_zkp_interface.ServerInterface_flags_collection_get
    if _newclass:
        flags_collection = _swig_property(_di_zkp_interface.ServerInterface_flags_collection_get, _di_zkp_interface.ServerInterface_flags_collection_set)
    __swig_setmethods__["committed_updates_collection"] = _di_zkp_interface.ServerInterface_committed_updates_collection_set
    __swig_getmethods__["committed_updates_collection"] = _di_zkp_interface.ServerInterface_committed_updates_collection_get
    if _newclass:
        committed_updates_collection = _swig_property(_di_zkp_interface.ServerInterface_committed_updates_collection_get, _di_zkp_interface.ServerInterface_committed_updates_collection_set)
    __swig_setmethods__["encrypted_shamir_shares_collection"] = _di_zkp_interface.ServerInterface_encrypted_shamir_shares_collection_set
    __swig_getmethods__["encrypted_shamir_shares_collection"] = _di_zkp_interface.ServerInterface_encrypted_shamir_shares_collection_get
    if _newclass:
        encrypted_shamir_shares_collection = _swig_property(_di_zkp_interface.ServerInterface_encrypted_shamir_shares_collection_get, _di_zkp_interface.ServerInterface_encrypted_shamir_shares_collection_set)
    __swig_setmethods__["proof_collection"] = _di_zkp_interface.ServerInterface_proof_collection_set
    __swig_getmethods__["proof_collection"] = _di_zkp_interface.ServerInterface_proof_collection_get
    if _newclass:
        proof_collection = _swig_property(_di_zkp_interface.ServerInterface_proof_collection_get, _di_zkp_interface.ServerInterface_proof_collection_set)
    __swig_setmethods__["bb"] = _di_zkp_interface.ServerInterface_bb_set
    __swig_getmethods__["bb"] = _di_zkp_interface.ServerInterface_bb_get
    if _newclass:
        bb = _swig_property(_di_zkp_interface.ServerInterface_bb_get, _di_zkp_interface.ServerInterface_bb_set)
    __swig_setmethods__["bb_bias"] = _di_zkp_interface.ServerInterface_bb_bias_set
    __swig_getmethods__["bb_bias"] = _di_zkp_interface.ServerInterface_bb_bias_get
    if _newclass:
        bb_bias = _swig_property(_di_zkp_interface.ServerInterface_bb_bias_get, _di_zkp_interface.ServerInterface_bb_bias_set)
    __swig_setmethods__["aa_bb"] = _di_zkp_interface.ServerInterface_aa_bb_set
    __swig_getmethods__["aa_bb"] = _di_zkp_interface.ServerInterface_aa_bb_get
    if _newclass:
        aa_bb = _swig_property(_di_zkp_interface.ServerInterface_aa_bb_get, _di_zkp_interface.ServerInterface_aa_bb_set)
    __swig_setmethods__["dispute_table"] = _di_zkp_interface.ServerInterface_dispute_table_set
    __swig_getmethods__["dispute_table"] = _di_zkp_interface.ServerInterface_dispute_table_get
    if _newclass:
        dispute_table = _swig_property(_di_zkp_interface.ServerInterface_dispute_table_get, _di_zkp_interface.ServerInterface_dispute_table_set)
    __swig_setmethods__["dispute_shares_collection"] = _di_zkp_interface.ServerInterface_dispute_shares_collection_set
    __swig_getmethods__["dispute_shares_collection"] = _di_zkp_interface.ServerInterface_dispute_shares_collection_get
    if _newclass:
        dispute_shares_collection = _swig_property(_di_zkp_interface.ServerInterface_dispute_shares_collection_get, _di_zkp_interface.ServerInterface_dispute_shares_collection_set)
    __swig_setmethods__["aggregates_collection"] = _di_zkp_interface.ServerInterface_aggregates_collection_set
    __swig_getmethods__["aggregates_collection"] = _di_zkp_interface.ServerInterface_aggregates_collection_get
    if _newclass:
        aggregates_collection = _swig_property(_di_zkp_interface.ServerInterface_aggregates_collection_get, _di_zkp_interface.ServerInterface_aggregates_collection_set)
    __swig_setmethods__["small_mult_base_table_bit_size"] = _di_zkp_interface.ServerInterface_small_mult_base_table_bit_size_set
    __swig_getmethods__["small_mult_base_table_bit_size"] = _di_zkp_interface.ServerInterface_small_mult_base_table_bit_size_get
    if _newclass:
        small_mult_base_table_bit_size = _swig_property(_di_zkp_interface.ServerInterface_small_mult_base_table_bit_size_get, _di_zkp_interface.ServerInterface_small_mult_base_table_bit_size_set)
    __swig_setmethods__["small_mult_base_table"] = _di_zkp_interface.ServerInterface_small_mult_base_table_set
    __swig_getmethods__["small_mult_base_table"] = _di_zkp_interface.ServerInterface_small_mult_base_table_get
    if _newclass:
        small_mult_base_table = _swig_property(_di_zkp_interface.ServerInterface_small_mult_base_table_get, _di_zkp_interface.ServerInterface_small_mult_base_table_set)
    __swig_setmethods__["final_update_int"] = _di_zkp_interface.ServerInterface_final_update_int_set
    __swig_getmethods__["final_update_int"] = _di_zkp_interface.ServerInterface_final_update_int_get
    if _newclass:
        final_update_int = _swig_property(_di_zkp_interface.ServerInterface_final_update_int_get, _di_zkp_interface.ServerInterface_final_update_int_set)
    __swig_setmethods__["final_update_float"] = _di_zkp_interface.ServerInterface_final_update_float_set
    __swig_getmethods__["final_update_float"] = _di_zkp_interface.ServerInterface_final_update_float_get
    if _newclass:
        final_update_float = _swig_property(_di_zkp_interface.ServerInterface_final_update_float_get, _di_zkp_interface.ServerInterface_final_update_float_set)
    __swig_setmethods__["final_update_float_avg"] = _di_zkp_interface.ServerInterface_final_update_float_avg_set
    __swig_getmethods__["final_update_float_avg"] = _di_zkp_interface.ServerInterface_final_update_float_avg_get
    if _newclass:
        final_update_float_avg = _swig_property(_di_zkp_interface.ServerInterface_final_update_float_avg_get, _di_zkp_interface.ServerInterface_final_update_float_avg_set)
    __swig_setmethods__["updates_int_collection"] = _di_zkp_interface.ServerInterface_updates_int_collection_set
    __swig_getmethods__["updates_int_collection"] = _di_zkp_interface.ServerInterface_updates_int_collection_get
    if _newclass:
        updates_int_collection = _swig_property(_di_zkp_interface.ServerInterface_updates_int_collection_get, _di_zkp_interface.ServerInterface_updates_int_collection_set)
    __swig_setmethods__["updates_float_collection"] = _di_zkp_interface.ServerInterface_updates_float_collection_set
    __swig_getmethods__["updates_float_collection"] = _di_zkp_interface.ServerInterface_updates_float_collection_get
    if _newclass:
        updates_float_collection = _swig_property(_di_zkp_interface.ServerInterface_updates_float_collection_get, _di_zkp_interface.ServerInterface_updates_float_collection_set)
    __swig_setmethods__["float_l2_sq_multiplier"] = _di_zkp_interface.ServerInterface_float_l2_sq_multiplier_set
    __swig_getmethods__["float_l2_sq_multiplier"] = _di_zkp_interface.ServerInterface_float_l2_sq_multiplier_get
    if _newclass:
        float_l2_sq_multiplier = _swig_property(_di_zkp_interface.ServerInterface_float_l2_sq_multiplier_get, _di_zkp_interface.ServerInterface_float_l2_sq_multiplier_set)
    __swig_setmethods__["check_param_float"] = _di_zkp_interface.ServerInterface_check_param_float_set
    __swig_getmethods__["check_param_float"] = _di_zkp_interface.ServerInterface_check_param_float_get
    if _newclass:
        check_param_float = _swig_property(_di_zkp_interface.ServerInterface_check_param_float_get, _di_zkp_interface.ServerInterface_check_param_float_set)
    __swig_setmethods__["last_model_update"] = _di_zkp_interface.ServerInterface_last_model_update_set
    __swig_getmethods__["last_model_update"] = _di_zkp_interface.ServerInterface_last_model_update_get
    if _newclass:
        last_model_update = _swig_property(_di_zkp_interface.ServerInterface_last_model_update_get, _di_zkp_interface.ServerInterface_last_model_update_set)

    def __init__(self, *args):
        this = _di_zkp_interface.new_ServerInterface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def import_small_mult_base_table(self, small_table):
        return _di_zkp_interface.ServerInterface_import_small_mult_base_table(self, small_table)

    def generate_small_mult_base_table(self):
        return _di_zkp_interface.ServerInterface_generate_small_mult_base_table(self)

    def reset_dispute_table(self):
        return _di_zkp_interface.ServerInterface_reset_dispute_table(self)

    def import_committed_updates(self, pp, i):
        return _di_zkp_interface.ServerInterface_import_committed_updates(self, pp, i)

    def generate_aa_seed(self):
        return _di_zkp_interface.ServerInterface_generate_aa_seed(self)

    def generate_hh_comb_and_bb_and_aabb(self):
        return _di_zkp_interface.ServerInterface_generate_hh_comb_and_bb_and_aabb(self)

    def generate_dispute_table(self):
        return _di_zkp_interface.ServerInterface_generate_dispute_table(self)

    def check_linear_comb_batch_commitments_with_bb(self, i):
        return _di_zkp_interface.ServerInterface_check_linear_comb_batch_commitments_with_bb(self, i)

    def check_sq_bound_proof(self, i):
        return _di_zkp_interface.ServerInterface_check_sq_bound_proof(self, i)

    def check_proof(self, i):
        return _di_zkp_interface.ServerInterface_check_proof(self, i)

    def check_proofs(self):
        return _di_zkp_interface.ServerInterface_check_proofs(self)

    def check_disputes(self):
        return _di_zkp_interface.ServerInterface_check_disputes(self)

    def compute_final_update(self, parallel_on_clients=False):
        return _di_zkp_interface.ServerInterface_compute_final_update(self, parallel_on_clients)

    def initialize_from_seed(self, seed):
        return _di_zkp_interface.ServerInterface_initialize_from_seed(self, seed)

    def initialize_new_iteration(self, check_param_float):
        return _di_zkp_interface.ServerInterface_initialize_new_iteration(self, check_param_float)

    def receive_1_bytes(self, bytes, i):
        return _di_zkp_interface.ServerInterface_receive_1_bytes(self, bytes, i)

    def receive_1(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_1(self, bytes_str, i)

    def send_2_bytes(self):
        return _di_zkp_interface.ServerInterface_send_2_bytes(self)

    def send_2(self):
        return _di_zkp_interface.ServerInterface_send_2(self)

    def receive_2_bytes(self, bytes, i):
        return _di_zkp_interface.ServerInterface_receive_2_bytes(self, bytes, i)

    def receive_2(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_2(self, bytes_str, i)

    def concurrent_process_before_send_3(self):
        return _di_zkp_interface.ServerInterface_concurrent_process_before_send_3(self)

    def send_3_bytes(self, i):
        return _di_zkp_interface.ServerInterface_send_3_bytes(self, i)

    def send_3(self, i):
        return _di_zkp_interface.ServerInterface_send_3(self, i)

    def receive_3_bytes(self, bytes, i):
        return _di_zkp_interface.ServerInterface_receive_3_bytes(self, bytes, i)

    def receive_3(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_3(self, bytes_str, i)

    def process_before_send_4(self):
        return _di_zkp_interface.ServerInterface_process_before_send_4(self)

    def send_4_bytes(self, i):
        return _di_zkp_interface.ServerInterface_send_4_bytes(self, i)

    def send_4(self, i):
        return _di_zkp_interface.ServerInterface_send_4(self, i)

    def receive_4_bytes(self, bytes, i):
        return _di_zkp_interface.ServerInterface_receive_4_bytes(self, bytes, i)

    def receive_4(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_4(self, bytes_str, i)

    def process_before_send_5(self):
        return _di_zkp_interface.ServerInterface_process_before_send_5(self)

    def send_5_bytes(self, i):
        return _di_zkp_interface.ServerInterface_send_5_bytes(self, i)

    def send_5(self, i):
        return _di_zkp_interface.ServerInterface_send_5(self, i)

    def receive_5_bytes(self, bytes, i):
        return _di_zkp_interface.ServerInterface_receive_5_bytes(self, bytes, i)

    def receive_5(self, bytes_str, i):
        return _di_zkp_interface.ServerInterface_receive_5(self, bytes_str, i)

    def finish_iteration(self, parallel_on_clients=False):
        return _di_zkp_interface.ServerInterface_finish_iteration(self, parallel_on_clients)

    def simulate_noisy_attack(self, *args):
        return _di_zkp_interface.ServerInterface_simulate_noisy_attack(self, *args)

    def simulate_mp_pd_attack(self, *args):
        return _di_zkp_interface.ServerInterface_simulate_mp_pd_attack(self, *args)

    def simulate_mp_nt_attack(self, *args):
        return _di_zkp_interface.ServerInterface_simulate_mp_nt_attack(self, *args)

    def finish_iteration_no_check(self):
        return _di_zkp_interface.ServerInterface_finish_iteration_no_check(self)

    def finish_iteration_strict_check(self):
        return _di_zkp_interface.ServerInterface_finish_iteration_strict_check(self)

    def string_api_test(self, a):
        return _di_zkp_interface.ServerInterface_string_api_test(self, a)
    __swig_destroy__ = _di_zkp_interface.delete_ServerInterface
    __del__ = lambda self: None
ServerInterface_swigregister = _di_zkp_interface.ServerInterface_swigregister
ServerInterface_swigregister(ServerInterface)
MAX_MULT_BASE_TABLE_BIT_SIZE = cvar.MAX_MULT_BASE_TABLE_BIT_SIZE


def discrete_log(y, small_table, per_side_step_count):
    return _di_zkp_interface.discrete_log(y, small_table, per_side_step_count)
discrete_log = _di_zkp_interface.discrete_log
class SignPubKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignPubKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignPubKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _di_zkp_interface.SignPubKey_key_set
    __swig_getmethods__["key"] = _di_zkp_interface.SignPubKey_key_get
    if _newclass:
        key = _swig_property(_di_zkp_interface.SignPubKey_key_get, _di_zkp_interface.SignPubKey_key_set)

    def __init__(self):
        this = _di_zkp_interface.new_SignPubKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_SignPubKey
    __del__ = lambda self: None
SignPubKey_swigregister = _di_zkp_interface.SignPubKey_swigregister
SignPubKey_swigregister(SignPubKey)
SIGNPUBKEYBYTES = cvar.SIGNPUBKEYBYTES
SIGNPRVKEYBYTES = cvar.SIGNPRVKEYBYTES
SIGNBYTES = cvar.SIGNBYTES

class SignPrvKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignPrvKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignPrvKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _di_zkp_interface.SignPrvKey_key_set
    __swig_getmethods__["key"] = _di_zkp_interface.SignPrvKey_key_get
    if _newclass:
        key = _swig_property(_di_zkp_interface.SignPrvKey_key_get, _di_zkp_interface.SignPrvKey_key_set)

    def __init__(self):
        this = _di_zkp_interface.new_SignPrvKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _di_zkp_interface.delete_SignPrvKey
    __del__ = lambda self: None
SignPrvKey_swigregister = _di_zkp_interface.SignPrvKey_swigregister
SignPrvKey_swigregister(SignPrvKey)


def gen_sign_key_pair():
    return _di_zkp_interface.gen_sign_key_pair()
gen_sign_key_pair = _di_zkp_interface.gen_sign_key_pair

def sign(mes, prv):
    return _di_zkp_interface.sign(mes, prv)
sign = _di_zkp_interface.sign

def sign_open(signed_mes, pub):
    return _di_zkp_interface.sign_open(signed_mes, pub)
sign_open = _di_zkp_interface.sign_open
class PairSignKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairSignKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairSignKeys, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _di_zkp_interface.new_PairSignKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _di_zkp_interface.PairSignKeys_first_set
    __swig_getmethods__["first"] = _di_zkp_interface.PairSignKeys_first_get
    if _newclass:
        first = _swig_property(_di_zkp_interface.PairSignKeys_first_get, _di_zkp_interface.PairSignKeys_first_set)
    __swig_setmethods__["second"] = _di_zkp_interface.PairSignKeys_second_set
    __swig_getmethods__["second"] = _di_zkp_interface.PairSignKeys_second_get
    if _newclass:
        second = _swig_property(_di_zkp_interface.PairSignKeys_second_get, _di_zkp_interface.PairSignKeys_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _di_zkp_interface.delete_PairSignKeys
    __del__ = lambda self: None
PairSignKeys_swigregister = _di_zkp_interface.PairSignKeys_swigregister
PairSignKeys_swigregister(PairSignKeys)

class VecSignPubKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecSignPubKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecSignPubKeys, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _di_zkp_interface.VecSignPubKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _di_zkp_interface.VecSignPubKeys___nonzero__(self)

    def __bool__(self):
        return _di_zkp_interface.VecSignPubKeys___bool__(self)

    def __len__(self):
        return _di_zkp_interface.VecSignPubKeys___len__(self)

    def __getslice__(self, i, j):
        return _di_zkp_interface.VecSignPubKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _di_zkp_interface.VecSignPubKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _di_zkp_interface.VecSignPubKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _di_zkp_interface.VecSignPubKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        return _di_zkp_interface.VecSignPubKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        return _di_zkp_interface.VecSignPubKeys___setitem__(self, *args)

    def pop(self):
        return _di_zkp_interface.VecSignPubKeys_pop(self)

    def append(self, x):
        return _di_zkp_interface.VecSignPubKeys_append(self, x)

    def empty(self):
        return _di_zkp_interface.VecSignPubKeys_empty(self)

    def size(self):
        return _di_zkp_interface.VecSignPubKeys_size(self)

    def swap(self, v):
        return _di_zkp_interface.VecSignPubKeys_swap(self, v)

    def begin(self):
        return _di_zkp_interface.VecSignPubKeys_begin(self)

    def end(self):
        return _di_zkp_interface.VecSignPubKeys_end(self)

    def rbegin(self):
        return _di_zkp_interface.VecSignPubKeys_rbegin(self)

    def rend(self):
        return _di_zkp_interface.VecSignPubKeys_rend(self)

    def clear(self):
        return _di_zkp_interface.VecSignPubKeys_clear(self)

    def get_allocator(self):
        return _di_zkp_interface.VecSignPubKeys_get_allocator(self)

    def pop_back(self):
        return _di_zkp_interface.VecSignPubKeys_pop_back(self)

    def erase(self, *args):
        return _di_zkp_interface.VecSignPubKeys_erase(self, *args)

    def __init__(self, *args):
        this = _di_zkp_interface.new_VecSignPubKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _di_zkp_interface.VecSignPubKeys_push_back(self, x)

    def front(self):
        return _di_zkp_interface.VecSignPubKeys_front(self)

    def back(self):
        return _di_zkp_interface.VecSignPubKeys_back(self)

    def assign(self, n, x):
        return _di_zkp_interface.VecSignPubKeys_assign(self, n, x)

    def resize(self, *args):
        return _di_zkp_interface.VecSignPubKeys_resize(self, *args)

    def insert(self, *args):
        return _di_zkp_interface.VecSignPubKeys_insert(self, *args)

    def reserve(self, n):
        return _di_zkp_interface.VecSignPubKeys_reserve(self, n)

    def capacity(self):
        return _di_zkp_interface.VecSignPubKeys_capacity(self)
    __swig_destroy__ = _di_zkp_interface.delete_VecSignPubKeys
    __del__ = lambda self: None
VecSignPubKeys_swigregister = _di_zkp_interface.VecSignPubKeys_swigregister
VecSignPubKeys_swigregister(VecSignPubKeys)

class VecSignPrvKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecSignPrvKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecSignPrvKeys, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _di_zkp_interface.VecSignPrvKeys_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _di_zkp_interface.VecSignPrvKeys___nonzero__(self)

    def __bool__(self):
        return _di_zkp_interface.VecSignPrvKeys___bool__(self)

    def __len__(self):
        return _di_zkp_interface.VecSignPrvKeys___len__(self)

    def __getslice__(self, i, j):
        return _di_zkp_interface.VecSignPrvKeys___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _di_zkp_interface.VecSignPrvKeys___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _di_zkp_interface.VecSignPrvKeys___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _di_zkp_interface.VecSignPrvKeys___delitem__(self, *args)

    def __getitem__(self, *args):
        return _di_zkp_interface.VecSignPrvKeys___getitem__(self, *args)

    def __setitem__(self, *args):
        return _di_zkp_interface.VecSignPrvKeys___setitem__(self, *args)

    def pop(self):
        return _di_zkp_interface.VecSignPrvKeys_pop(self)

    def append(self, x):
        return _di_zkp_interface.VecSignPrvKeys_append(self, x)

    def empty(self):
        return _di_zkp_interface.VecSignPrvKeys_empty(self)

    def size(self):
        return _di_zkp_interface.VecSignPrvKeys_size(self)

    def swap(self, v):
        return _di_zkp_interface.VecSignPrvKeys_swap(self, v)

    def begin(self):
        return _di_zkp_interface.VecSignPrvKeys_begin(self)

    def end(self):
        return _di_zkp_interface.VecSignPrvKeys_end(self)

    def rbegin(self):
        return _di_zkp_interface.VecSignPrvKeys_rbegin(self)

    def rend(self):
        return _di_zkp_interface.VecSignPrvKeys_rend(self)

    def clear(self):
        return _di_zkp_interface.VecSignPrvKeys_clear(self)

    def get_allocator(self):
        return _di_zkp_interface.VecSignPrvKeys_get_allocator(self)

    def pop_back(self):
        return _di_zkp_interface.VecSignPrvKeys_pop_back(self)

    def erase(self, *args):
        return _di_zkp_interface.VecSignPrvKeys_erase(self, *args)

    def __init__(self, *args):
        this = _di_zkp_interface.new_VecSignPrvKeys(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _di_zkp_interface.VecSignPrvKeys_push_back(self, x)

    def front(self):
        return _di_zkp_interface.VecSignPrvKeys_front(self)

    def back(self):
        return _di_zkp_interface.VecSignPrvKeys_back(self)

    def assign(self, n, x):
        return _di_zkp_interface.VecSignPrvKeys_assign(self, n, x)

    def resize(self, *args):
        return _di_zkp_interface.VecSignPrvKeys_resize(self, *args)

    def insert(self, *args):
        return _di_zkp_interface.VecSignPrvKeys_insert(self, *args)

    def reserve(self, n):
        return _di_zkp_interface.VecSignPrvKeys_reserve(self, n)

    def capacity(self):
        return _di_zkp_interface.VecSignPrvKeys_capacity(self)
    __swig_destroy__ = _di_zkp_interface.delete_VecSignPrvKeys
    __del__ = lambda self: None
VecSignPrvKeys_swigregister = _di_zkp_interface.VecSignPrvKeys_swigregister
VecSignPrvKeys_swigregister(VecSignPrvKeys)

# This file is compatible with both classic and new-style classes.


